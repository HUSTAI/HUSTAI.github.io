import { Hooks } from 'register-service-worker';

/**
 * Force update page content
 *
 * 强制更新页面内容
 */
declare const forceUpdate: () => void;

/**
 * Register serviceWorker under `serviceWorkerPath`
 *
 * @param serviceWorkerPath Service Worker path
 * @param hooks Service worker hooks
 * @param showStatus Whether to show status in console
 *
 * 在 `serviceWorkerPath` 下注册 Service Worker
 *
 * @param serviceWorkerPath Service Worker 路径
 * @param hooks Service Worker 钩子
 * @param showStatus 是否在控制台显示状态
 */
declare const registerSW: (serviceWorkerPath: string, hooks?: Hooks, showStatus?: boolean) => Promise<void>;

/**
 * Call `skipWaiting()` inside current waiting worker
 *
 * 在当前等待中的 Service Worker 中调用 `skipWaiting()`
 */
declare const skipWaiting: (registration: ServiceWorkerRegistration) => void;

/**
 * Call `unregister()` inside current active worker
 *
 * @returns `true` if unregister success, `false` if unregister failed
 *
 * 在当前激活的 Service Worker 中调用 `unregister()`
 *
 * @returns `true` 表示注销成功，`false` 表示注销失败
 */
declare const unregisterSW: () => Promise<boolean>;

export { forceUpdate, registerSW, skipWaiting, unregisterSW };
