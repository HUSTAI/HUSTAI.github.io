{"version":3,"file":"setup.js","sources":["../../../src/client/composables/useRegisterSW.ts","../../../src/client/composables/setup.ts"],"sourcesContent":["import { withBase } from \"@vuepress/client\";\n\nimport type { PWAEvent } from \"./usePWAEvent.js\";\nimport { registerSW } from \"../utils/index.js\";\n\ndeclare const SW_PATH: string;\n\nexport const useRegisterSW = async (event: PWAEvent): Promise<void> =>\n  registerSW(withBase(SW_PATH), {\n    ready(registration) {\n      event.emit(\"ready\", registration);\n    },\n\n    registered(registration) {\n      event.emit(\"registered\", registration);\n    },\n\n    cached(registration) {\n      event.emit(\"cached\", registration);\n    },\n\n    updatefound(registration) {\n      event.emit(\"updatefound\", registration);\n    },\n\n    updated(registration) {\n      const key = \"service-worker-version\";\n      const version = Number(localStorage.getItem(key) || 0);\n\n      localStorage.setItem(key, (version + 1).toString());\n      localStorage.removeItem(\"manifest\");\n\n      event.emit(\"updated\", registration);\n    },\n\n    offline() {\n      event.emit(\"offline\");\n    },\n\n    error(err) {\n      event.emit(\"error\", err);\n    },\n  });\n","import mitt from \"mitt\";\nimport { onMounted, provide } from \"vue\";\n\nimport { pwaEventSymbol } from \"./usePWAEvent.js\";\nimport { useRegisterSW } from \"./useRegisterSW.js\";\nimport { forceUpdate } from \"../utils/index.js\";\n\nimport type { PWAEvent } from \"./index.js\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare const __VUEPRESS_DEV__: boolean;\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare const __VUEPRESS_SSR__: boolean;\ndeclare const SW_FORCE_UPDATE: boolean;\n\nexport const setupPWA = (): void => {\n  if (__VUEPRESS_SSR__) return;\n\n  // create event emitter and provide it\n  const event: PWAEvent = mitt();\n\n  provide(pwaEventSymbol, event);\n\n  onMounted(async () => {\n    if (__VUEPRESS_DEV__) return;\n\n    let refreshing = false;\n\n    // only listen controllerchange event when a serviceWorker is active\n    if (navigator.serviceWorker?.controller)\n      navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n        if (refreshing) return;\n\n        refreshing = true;\n        window.location.reload();\n      });\n\n    if (SW_FORCE_UPDATE) forceUpdate();\n\n    await useRegisterSW(event);\n  });\n};\n"],"names":["useRegisterSW","event","registerSW","withBase","registration","key","version","err","setupPWA","mitt","provide","pwaEventSymbol","onMounted","_a","refreshing","forceUpdate"],"mappings":"iNAOa,MAAAA,EAAgB,MAAOC,GAClCC,EAAWC,EAAS,OAAO,EAAG,CAC5B,MAAMC,EAAc,CAClBH,EAAM,KAAK,QAASG,CAAY,CAClC,EAEA,WAAWA,EAAc,CACvBH,EAAM,KAAK,aAAcG,CAAY,CACvC,EAEA,OAAOA,EAAc,CACnBH,EAAM,KAAK,SAAUG,CAAY,CACnC,EAEA,YAAYA,EAAc,CACxBH,EAAM,KAAK,cAAeG,CAAY,CACxC,EAEA,QAAQA,EAAc,CACpB,MAAMC,EAAM,yBACNC,EAAU,OAAO,aAAa,QAAQD,CAAG,GAAK,CAAC,EAErD,aAAa,QAAQA,GAAMC,EAAU,GAAG,UAAU,EAClD,aAAa,WAAW,UAAU,EAElCL,EAAM,KAAK,UAAWG,CAAY,CACpC,EAEA,SAAU,CACRH,EAAM,KAAK,SAAS,CACtB,EAEA,MAAMM,EAAK,CACTN,EAAM,KAAK,QAASM,CAAG,CACzB,CACF,CAAC,EC3BUC,EAAW,IAAY,CAClC,GAAI,iBAAkB,OAGtB,MAAMP,EAAkBQ,IAExBC,EAAQC,EAAgBV,CAAK,EAE7BW,EAAU,SAAY,CAvBxB,IAAAC,EAwBI,GAAI,iBAAkB,OAEtB,IAAIC,EAAa,IAGbD,EAAA,UAAU,gBAAV,MAAAA,EAAyB,YAC3B,UAAU,cAAc,iBAAiB,mBAAoB,IAAM,CAC7DC,IAEJA,EAAa,GACb,OAAO,SAAS,SAClB,CAAC,EAEC,iBAAiBC,EAAAA,EAErB,MAAMf,EAAcC,CAAK,CAC3B,CAAC,CACH"}