import { signal, effect, onDispose, peek } from 'maverick.js';
import { animationFrameThrottle, isDOMElement, setAttribute } from 'maverick.js/std';

// src/foundation/observers/class-manager.ts
var ClassManager = class {
  constructor(el) {
    this._map = /* @__PURE__ */ new Map();
    this._classes = signal([]);
    this._requestUpdate = animationFrameThrottle(this._update.bind(this));
    this._root = el.firstChild;
    this._observer = new MutationObserver(this._onMutation.bind(this));
    this._observer.observe(this._root, { subtree: true, childList: true });
    effect(this._watch.bind(this));
    onDispose(this._destroy.bind(this));
  }
  _onMutation(records) {
    const selector = Array.from(this._map.keys()).join(",");
    for (const record of records) {
      for (const node of record.addedNodes) {
        if (isDOMElement(node) && node.matches(selector))
          this._requestUpdate();
      }
    }
  }
  _observe(selector, $class) {
    this._map.set(selector, $class);
    this._classes.set((c) => [...c, $class]);
    return this;
  }
  _update() {
    for (const [selector, classes] of this._map) {
      const _class = peek(classes);
      for (const el of this._root.querySelectorAll(selector)) {
        setAttribute(el, "class", _class);
      }
    }
  }
  _watch() {
    for (const c of this._classes())
      c();
    this._requestUpdate();
  }
  _destroy() {
    this._classes.set([]);
    this._map.clear();
    this._observer.disconnect();
  }
};

export { ClassManager };
