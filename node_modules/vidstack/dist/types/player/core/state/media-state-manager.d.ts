import { ComponentController, ComponentInstance } from 'maverick.js/element';
import type { MediaContext } from '../api/context';
import * as ME from '../api/events';
import type { PlayerAPI } from '../player';
import type { MediaRequestContext } from './media-request-manager';
/**
 * This class is responsible for listening to and normalizing media events, updating the media
 * state context, and satisfying media requests.
 */
export declare class MediaStateManager extends ComponentController<PlayerAPI> {
    private _request;
    private _media;
    private readonly _store;
    private readonly _trackedEvents;
    private _skipInitialSrcChange;
    private _firingWaiting;
    private _waitingTrigger;
    constructor(instance: ComponentInstance<PlayerAPI>, _request: MediaRequestContext, _media: MediaContext);
    protected onAttach(el: HTMLElement): void;
    protected onConnect(el: HTMLElement): void;
    _handle(event: Event): void;
    private _resetTracking;
    private _satisfyRequest;
    private _addTextTrackListeners;
    private _addQualityListeners;
    private _addAudioTrackListeners;
    private _onTextTracksChange;
    private _onTextTrackModeChange;
    private _onAudioTracksChange;
    private _onAudioTrackChange;
    private _onQualitiesChange;
    private _onQualityChange;
    private _onAutoQualityChange;
    private _onCanSetQualityChange;
    ['provider-change'](event: ME.MediaProviderChangeEvent): void;
    ['autoplay'](event: ME.MediaAutoplayEvent): void;
    ['autoplay-fail'](event: ME.MediaAutoplayFailEvent): void;
    ['can-load'](event: ME.MediaCanLoadEvent): void;
    ['media-type-change'](event: ME.MediaTypeChangeEvent): void;
    ['stream-type-change'](event: ME.MediaStreamTypeChangeEvent): void;
    ['rate-change'](event: ME.MediaRateChangeEvent): void;
    ['sources-change'](event: ME.MediaSourcesChangeEvent): void;
    ['source-change'](event: ME.MediaSourceChangeEvent): void;
    ['abort'](event: ME.MediaAbortEvent): void;
    ['load-start'](event: ME.MediaLoadStartEvent): void;
    ['error'](event: ME.MediaErrorEvent): void;
    ['loaded-metadata'](event: ME.MediaLoadedMetadataEvent): void;
    ['loaded-data'](event: ME.MediaLoadedDataEvent): void;
    ['can-play'](event: ME.MediaCanPlayEvent): void;
    ['can-play-through'](event: ME.MediaCanPlayThroughEvent): void;
    protected _onCanPlayDetail(detail: ME.MediaCanPlayDetail): void;
    ['duration-change'](event: ME.MediaDurationChangeEvent): void;
    ['progress'](event: ME.MediaProgressEvent): void;
    ['play'](event: ME.MediaPlayEvent): void;
    ['play-fail'](event: ME.MediaPlayFailEvent): void;
    ['playing'](event: ME.MediaPlayingEvent): void;
    ['started'](event: Event): void;
    ['pause'](event: ME.MediaPauseEvent): void;
    ['time-update'](event: ME.MediaTimeUpdateEvent): void;
    ['volume-change'](event: ME.MediaVolumeChangeEvent): void;
    ['seeking']: ((event: ME.MediaSeekingEvent) => void) & {
        cancel: () => void;
        flush: () => void;
    };
    ['seeked'](event: ME.MediaSeekedEvent): void;
    ['waiting'](event: ME.MediaWaitingEvent): void;
    private _fireWaiting;
    ['ended'](event: ME.MediaEndedEvent): void;
    private _stopWaiting;
    ['fullscreen-change'](event: ME.MediaFullscreenChangeEvent): void;
    ['fullscreen-error'](event: ME.MediaFullscreenErrorEvent): void;
    ['picture-in-picture-change'](event: ME.MediaPIPChangeEvent): void;
    ['picture-in-picture-error'](event: ME.MediaPIPErrorEvent): void;
}
