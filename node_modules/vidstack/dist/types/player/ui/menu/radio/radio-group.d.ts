import { Component, ComponentInstance, type HTMLCustomElement } from 'maverick.js/element';
import type { DOMEvent } from 'maverick.js/std';
import { type RadioController } from './context';
declare global {
    interface MaverickElements {
        'media-radio-group': MediaRadioGroupElement;
    }
}
/**
 * A radio group consists of options where only one of them can be checked. Each option is
 * provided as a radio (i.e., a selectable element).
 *
 * @docs {@link https://www.vidstack.io/docs/player/components/menu/radio-group}
 * @slot - Used to insert radio options.
 * @example
 * ```html
 * <media-radio-group value="720">
 *   <media-radio value="1080">1080p</media-radio>
 *   <media-radio value="720">720p</media-radio>
 *   <!-- ... -->
 * </media-radio-group>
 * ```
 */
export declare class RadioGroup extends Component<RadioGroupAPI> {
    static el: import("maverick.js/element").CustomElementDefinition<RadioGroupAPI>;
    protected _group: Set<RadioController>;
    protected _value: import("maverick.js").WriteSignal<string>;
    /**
     * A list of radio values that belong this group.
     */
    get values(): string[];
    /**
     * The radio value that is checked in this group.
     */
    get value(): string;
    set value(value: string);
    constructor(instance: ComponentInstance<RadioGroupAPI>);
    protected onAttach(el: HTMLElement): void;
    protected onConnect(): void;
    protected onDestroy(): void;
    protected _addRadio(radio: RadioController): void;
    protected _removeRadio(radio: RadioController): void;
    protected _watchValueProp(): void;
    protected _onChangeBind: (newValue: string, trigger?: Event) => void;
    protected _onChange(newValue: string, trigger?: Event): void;
    protected _findRadio(newValue: string): RadioController | null;
}
export interface RadioGroupAPI {
    props: RadioGroupProps;
    events: RadioGroupEvents;
}
export interface RadioGroupProps {
    /**
     * The radio value that is checked in this group.
     */
    value: string;
}
export interface RadioGroupEvents {
    change: RadioGroupChangeEvent;
}
/**
 * Fired when the checked radio changes.
 */
export interface RadioGroupChangeEvent extends DOMEvent<void> {
    target: MediaRadioGroupElement;
}
export interface MediaRadioGroupElement extends HTMLCustomElement<RadioGroup> {
}
