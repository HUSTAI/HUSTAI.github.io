import { SliderStoreFactory } from './chunk-53B74NMI.js';
import { $ariaBool } from './chunk-EVP5E6AO.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_effect, $$_attr, $$_listen, $$_ref, $$_create_template } from 'maverick.js/dom';
import { signal, useStore, computed, effect } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><video muted="" playsinline="" preload="auto" part="video" style="max-width: unset"></video>`);
var SliderVideo = class extends Component {
  constructor() {
    super(...arguments);
    this.k = null;
    this.gb = signal(false);
    this.Hc = signal(false);
  }
  onAttach() {
    this.a = useMedia();
    this.N = useStore(SliderStoreFactory);
    this.fa = computed(this.fh.bind(this));
    this.Ic = computed(this.z.bind(this));
    this.setAttributes({
      "data-loading": this.Fc.bind(this),
      "aria-hidden": $ariaBool(this.Ic)
    });
    effect(this.gh.bind(this));
    effect(this.Vb.bind(this));
  }
  onConnect() {
    if (this.k.readyState >= 2)
      this.sb();
  }
  render() {
    const { crossorigin } = this.a.$store;
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ);
      $$_effect(() => $$_attr($$_root, "src", this.fa()));
      $$_effect(() => $$_attr($$_root, "crossorigin", crossorigin()));
      $$_listen($$_root, "canplay", this.sb.bind(this));
      $$_listen($$_root, "error", this.la.bind(this));
      $$_ref($$_root, this.hh.bind(this));
      return $$_root;
    })();
  }
  fh() {
    const { canLoad } = this.a.$store;
    return canLoad() ? this.$props.src() : null;
  }
  Fc() {
    return !this.gb() && !this.Ic();
  }
  z() {
    const { duration } = this.a.$store;
    return !!this.Hc() || !this.gb() || !Number.isFinite(duration());
  }
  gh() {
    this.fa();
    this.gb.set(false);
    this.Hc.set(false);
  }
  sb(event) {
    this.gb.set(true);
    this.dispatch("can-play", { trigger: event });
  }
  la(event) {
    this.Hc.set(true);
    this.dispatch("error", { trigger: event });
  }
  Vb() {
    const { duration } = this.a.$store;
    const { pointerRate } = this.N;
    if (this.gb() && this.k && Number.isFinite(duration()) && Number.isFinite(pointerRate())) {
      this.k.currentTime = pointerRate() * duration();
    }
  }
  hh(el) {
    this.k = el;
  }
};
SliderVideo.el = defineElement({
  tagName: "media-slider-video",
  props: { src: void 0 }
});

export { SliderVideo };
