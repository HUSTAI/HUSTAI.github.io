import { preconnect } from './chunk-IVW6GMZV.js';
import { $ariaBool } from './chunk-EVP5E6AO.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_effect, $$_attr, $$_listen, $$_create_template } from 'maverick.js/dom';
import { signal, computed, effect } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><img part="img" />`);
var Poster = class extends Component {
  constructor() {
    super(...arguments);
    this._imgLoading = signal(true);
    this._imgError = signal(false);
  }
  onAttach(el) {
    this._media = useMedia();
    this._imgSrc = computed(this._getImgSrc.bind(this));
    this._imgAlt = this._getImgAlt.bind(this);
    this.setAttributes({
      "data-loading": this._imgLoading,
      "aria-hidden": $ariaBool(this._isHidden.bind(this))
    });
  }
  onConnect(el) {
    const { canLoad, poster } = this._media.$store;
    window.requestAnimationFrame(() => {
      if (!canLoad())
        preconnect(poster());
    });
    effect(this._onLoadStart.bind(this));
  }
  _isHidden() {
    const { poster } = this._media.$store;
    return this._imgError() || !poster();
  }
  _getImgSrc() {
    const { canLoad, poster } = this._media.$store;
    return canLoad() && poster().length ? poster() : null;
  }
  _getImgAlt() {
    return this._imgSrc() ? this.$props.alt() : null;
  }
  _onLoadStart() {
    const { canLoad, poster } = this._media.$store;
    const isLoading = canLoad() && !!poster();
    this._imgLoading.set(isLoading);
    this._imgError.set(false);
  }
  _onLoad() {
    this._imgLoading.set(false);
  }
  _onError() {
    this._imgLoading.set(false);
    this._imgError.set(true);
  }
  render() {
    const { crossorigin } = this._media.$store;
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ);
      $$_effect(() => $$_attr($$_root, "src", this._imgSrc()));
      $$_effect(() => $$_attr($$_root, "alt", this._imgAlt()));
      $$_effect(() => $$_attr($$_root, "crossorigin", crossorigin()));
      $$_listen($$_root, "load", this._onLoad.bind(this));
      $$_listen($$_root, "error", this._onError.bind(this));
      return $$_root;
    })();
  }
};
Poster.el = defineElement({
  tagName: "media-poster",
  props: { alt: void 0 }
});

export { Poster };
