import { sliderProps, Slider } from './chunk-LWTGALKS.js';
import { SliderStoreFactory } from './chunk-53B74NMI.js';
import { functionThrottle } from './chunk-JELAJF2G.js';
import { canChangeVolume } from './chunk-WSYKLWQE.js';
import { round } from './chunk-CVLY5S52.js';
import { setAttributeIfEmpty } from './chunk-HQQTSFXD.js';
import { effect } from 'maverick.js';
import { defineElement, defineProp } from 'maverick.js/element';
import { setAttribute } from 'maverick.js/std';

var VolumeSlider = class extends Slider {
  constructor() {
    super(...arguments);
    this._readonly = true;
    this._throttleVolumeChange = functionThrottle(this._onVolumeChange.bind(this), 25);
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "aria-label", "Media volume");
    super.onAttach(el);
    {
      canChangeVolume().then((canSet) => {
        if (!canSet)
          setAttribute(el, "aria-hidden", "true");
      });
    }
    effect(this._watchVolume.bind(this));
  }
  _watchVolume() {
    const { muted, volume } = this._media.$store;
    const newValue = muted() ? 0 : volume() * 100;
    this.$store.value.set(newValue);
    this.dispatch("value-change", { detail: newValue });
  }
  _onVolumeChange(event) {
    if (!event.trigger)
      return;
    const mediaVolume = round(event.detail / 100, 3);
    this._media.remote.changeVolume(mediaVolume, event);
  }
  _onValueChange(event) {
    this._throttleVolumeChange(event);
  }
  _onDragValueChange(event) {
    this._throttleVolumeChange(event);
  }
  _getARIAValueMin() {
    return 0;
  }
  _getARIAValueMax() {
    return 100;
  }
};
VolumeSlider.el = defineElement({
  tagName: "media-volume-slider",
  props: {
    ...sliderProps,
    min: defineProp({ value: 0, attribute: false }),
    max: defineProp({ value: 100, attribute: false }),
    value: defineProp({ value: 100, attribute: false })
  },
  store: SliderStoreFactory
});

export { VolumeSlider };
