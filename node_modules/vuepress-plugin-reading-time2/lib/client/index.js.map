{"version":3,"file":"index.js","sources":["../../src/client/composables/data.ts","../../src/client/define.ts","../../src/client/utils/locales.ts","../../src/client/composables/locale.ts"],"sourcesContent":["import { usePageData } from \"@vuepress/client\";\nimport type { ComputedRef } from \"vue\";\nimport { computed } from \"vue\";\n\nimport type {\n  ReadingTime,\n  ReadingTimePluginPageData,\n} from \"../../shared/index.js\";\n\nexport const useReadingTimeData = (): ComputedRef<ReadingTime | null> => {\n  const page = usePageData<Partial<ReadingTimePluginPageData>>();\n\n  return computed(() => page.value.readingTime ?? null);\n};\n","import type { ReadingTimeLocaleConfig } from \"vuepress-plugin-reading-time2\";\n\ndeclare const READING_TIME_LOCALES: ReadingTimeLocaleConfig | undefined;\n\nexport const readingTimeLocales =\n  typeof READING_TIME_LOCALES === \"undefined\" ? null : READING_TIME_LOCALES;\n","import type { ReadingTime, ReadingTimeLocaleData } from \"../../shared/index.js\";\n\nexport const getReadingTimeLocale = (\n  readingTime: ReadingTime,\n  locale: ReadingTimeLocaleData\n): { time: string; words: string } => {\n  const { minutes, words } = readingTime;\n  const { less1Minute, word, time } = locale;\n\n  return {\n    time:\n      minutes < 1\n        ? less1Minute\n        : time.replace(\"$time\", Math.round(minutes).toString()),\n    words: word.replace(\"$word\", words.toString()),\n  };\n};\n","import type { ComputedRef } from \"vue\";\nimport { computed } from \"vue\";\nimport { useLocaleConfig } from \"vuepress-shared/client\";\n\nimport { useReadingTimeData } from \"./data.js\";\nimport type { ReadingTimeLocaleData } from \"../../shared/index.js\";\nimport { readingTimeLocales } from \"../define.js\";\nimport { getReadingTimeLocale } from \"../utils/index.js\";\n\nexport interface ReadingTimeLocale {\n  /**\n   * Reading time text\n   *\n   * 阅读时间文字\n   */\n  time: string;\n\n  /**\n   * Words count text\n   *\n   * 字数统计文字\n   */\n  words: string;\n}\n\nconst DEFAULT_LOCALE = { words: \"\", time: \"\" };\n\nexport const useReadingTimeLocaleConfig =\n  (): ComputedRef<ReadingTimeLocaleData | null> => {\n    return readingTimeLocales\n      ? useLocaleConfig(readingTimeLocales)\n      : computed(() => null);\n  };\n\nexport const useReadingTimeLocale = (): ComputedRef<ReadingTimeLocale> => {\n  if (typeof readingTimeLocales === \"undefined\")\n    return computed(() => DEFAULT_LOCALE);\n\n  const readingTime = useReadingTimeData();\n  const readingTimeLocale = useReadingTimeLocaleConfig();\n\n  return computed(() =>\n    readingTime.value && readingTimeLocale.value\n      ? getReadingTimeLocale(readingTime.value, readingTimeLocale.value)\n      : DEFAULT_LOCALE\n  );\n};\n"],"names":["useReadingTimeData","page","usePageData","computed","readingTimeLocales","getReadingTimeLocale","readingTime","locale","minutes","words","less1Minute","word","time","DEFAULT_LOCALE","useReadingTimeLocaleConfig","useLocaleConfig","useReadingTimeLocale","readingTimeLocale"],"mappings":"uIASa,MAAAA,EAAqB,IAAuC,CACvE,MAAMC,EAAOC,IAEb,OAAOC,EAAS,IAAMF,EAAK,MAAM,aAAe,IAAI,CACtD,ECTaG,EACX,OAAO,qBAAyB,IAAc,KAAO,qBCH1CC,EAAuB,CAClCC,EACAC,IACoC,CACpC,KAAM,CAAE,QAAAC,EAAS,MAAAC,CAAM,EAAIH,EACrB,CAAE,YAAAI,EAAa,KAAAC,EAAM,KAAAC,CAAK,EAAIL,EAEpC,MAAO,CACL,KACEC,EAAU,EACNE,EACAE,EAAK,QAAQ,QAAS,KAAK,MAAMJ,CAAO,EAAE,SAAU,CAAA,EAC1D,MAAOG,EAAK,QAAQ,QAASF,EAAM,SAAA,CAAU,CAC/C,CACF,ECSMI,EAAiB,CAAE,MAAO,GAAI,KAAM,EAAG,EAEhCC,EACX,IACSV,EACHW,EAAgBX,CAAkB,EAClCD,EAAS,IAAM,IAAI,EAGda,EAAuB,IAAsC,CACxE,GAAI,OAAOZ,EAAuB,IAChC,OAAOD,EAAS,IAAMU,CAAc,EAEtC,MAAMP,EAAcN,EAAmB,EACjCiB,EAAoBH,IAE1B,OAAOX,EAAS,IACdG,EAAY,OAASW,EAAkB,MACnCZ,EAAqBC,EAAY,MAAOW,EAAkB,KAAK,EAC/DJ,CACN,CACF"}