import type { JSX } from '../jsx';
import { type ReadSignal } from '../reactivity';
export type ErrorSignal<T = unknown> = ReadSignal<T | null> & {
    handled(): void;
};
export type ErrorBoundaryHandler<T = unknown> = (error: ErrorSignal<T>) => JSX.Element;
/**
 * Catches errors that are thrown inside a child component and enables you to handle them
 * declaratively.
 *
 * @example
 * ```jsx
 * <ErrorBoundary>
 *   {($error) => (
 *     <div $on:click={$error.handled}>
 *       {$error()
 *         ? `Something went wrong: ${$error().toString()}`
 *         : 'No error.'}
 *     </div>
 *   )}
 * </ErrorBoundary>
 * ```
 * @example
 * ```jsx
 * <ErrorBoundary onError={(error, handled) => console.error(error)}>
 *  <Component />
 * </ErrorBoundary>
 * ```
 */
export declare function ErrorBoundary(props: {
    onError?: (error: unknown, handled: () => void) => void;
    $children: JSX.Element | ErrorBoundaryHandler;
}): ReadSignal<JSX.Element>;
