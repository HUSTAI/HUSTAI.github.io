import * as React from 'react';
import { type Context, type Scope } from '../runtime';
export interface ReactScopeProvider {
    new (props: React.PropsWithChildren): React.Component<React.PropsWithChildren>;
}
export interface ReactContextProvider {
    new (props: React.PropsWithChildren): React.Component<React.PropsWithChildren>;
}
export declare const ReactComputeScopeContext: React.Context<Scope | null>;
export declare function WithScope(scope: Scope, children: React.ReactNode): React.FunctionComponentElement<React.ProviderProps<Scope | null>>;
export declare function useReactScope(): Scope | null;
export declare function useReactContext<T>(context: Context<T>): T | undefined;
export declare function createReactScopeProvider(): ReactScopeProvider;
export declare function createReactContextProvider<T>(context: Context<T>, provide?: () => T): ReactContextProvider;
