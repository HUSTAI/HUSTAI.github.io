export interface DeferredPromise<ResolveType = void, RejectType = void> {
    promise: Promise<ResolveType | undefined>;
    resolve: (value?: ResolveType) => void;
    reject: (reason: RejectType) => void;
}
/**
 * Creates an empty Promise and defers resolving/rejecting it.
 */
export declare function deferredPromise<ResolveType = void, RejectType = void>(): DeferredPromise<ResolveType, RejectType>;
/**
 * Wraps a promise so it can timeout.
 */
export declare function timedPromise<T>(promise: Promise<T>, timeout: number, timeoutMsg: string): Promise<T>;
