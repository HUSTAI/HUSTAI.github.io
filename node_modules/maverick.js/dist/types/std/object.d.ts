import type { Simplify } from 'type-fest';
export declare function keysOf<T>(obj: T): (keyof T)[];
export declare function mergeProperties<A, B>(...sources: [A, B]): Omit<A, keyof B> & B;
export declare function mergeProperties<A, B, C>(...sources: [A, B, C]): Omit<A, keyof B | keyof C> & Omit<B, keyof C> & C;
export declare function mergeProperties<A, B, C, D>(...sources: [A, B, C, D]): Omit<A, keyof B | keyof C | keyof D> & Omit<B, keyof C | keyof D> & Omit<C, keyof D> & D;
export declare function mergeProperties<A, B, C, D, E>(...sources: [A, B, C, D, E]): Omit<A, keyof B | keyof C | keyof D | keyof E> & Omit<B, keyof C | keyof D | keyof E> & Omit<C, keyof D | keyof E> & Omit<D, keyof E> & E;
/**
 * Creates a new object composed of the picked `source` properties. All enumerable properties
 * are merged including values, getters, setters, and methods.
 */
export declare function pick<T, R extends keyof T>(source: T, props: R[]): Simplify<Pick<T, R>>;
/**
 * The opposite of `pick`; this function creates a new object composed of the `source` properties
 * that are not included in the given `props` argument. All enumerable properties are merged
 * including values, getters, setters, and methods.
 */
export declare function omit<T, R extends keyof T>(source: T, props: R[]): Simplify<Omit<T, R>>;
