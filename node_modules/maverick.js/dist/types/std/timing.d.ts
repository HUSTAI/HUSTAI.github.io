/**
 * Resolves after the given `delay` timeout has passed.
 */
export declare function waitTimeout(delay: number): Promise<void>;
/**
 * Requests an animation frame and waits for it to be resolved. This is safe to call server-side,
 * no action will be performed.
 *
 * @param callback - Invoked on the next animation frame.
 */
export declare function waitAnimationFrame(callback?: FrameRequestCallback): Promise<void>;
/**
 * Creates a throttled function that only invokes `func` at most once per animation frame. This is
 * a noop server-side.
 *
 * @param func - The function to throttle.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
 */
export declare function animationFrameThrottle<Fn extends (...args: any[]) => void>(func: Fn): Fn;
/**
 * Queues and waits for a function to be called during a browser's idle periods. This enables
 * developers to perform background and low priority work on the main event loop, without impacting
 * latency-critical events such as animation and input response. Functions are generally called in
 * first-in-first-out order; however, callbacks which have a `timeout` specified may be called
 * out-of-order if necessary in order to run them before the timeout elapses.
 *
 * - If `requestIdleCallback` is not available, this function will wait for a new animation frame.
 * - This is safe to call server-side, the given `callback` won't be invoked.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback}
 */
export declare function waitIdlePeriod(callback?: (deadline?: IdleDeadline) => void, options?: IdleRequestOptions): Promise<void>;
