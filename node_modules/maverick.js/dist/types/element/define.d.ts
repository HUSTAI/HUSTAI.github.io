import type { IfAny } from 'type-fest';
import type { StoreFactory } from '../runtime/store';
import type { AnyComponentAPI, ComponentAPI } from './component';
import type { CSS } from './css';
import { type AttributeType, type PropDeclarations, type PropDefinitions } from './props';
export declare function defineElement<API extends ComponentAPI = AnyComponentAPI>(declaration: CustomElementDeclaration<API>): CustomElementDefinition<API>;
export interface CustomElementDefinition<API extends ComponentAPI = AnyComponentAPI> {
    /** @internal type only */
    readonly ts__api?: API;
    /**
     * The tag name of the custom element. Note that custom element names must contain a hypen (e.g.,
     * `foo-bar`).
     */
    readonly tagName: `${string}-${string}`;
    /**
     * Whether this custom element should contain a shadow root. Optionally, shadow root init options
     * can be provided. If `true`, simply the `mode` is set to `open`.
     */
    readonly shadowRoot?: true | ShadowRootInit;
    /**
     * Component properties. Do note that these props are also exposed on the custom element as
     * getter/setter pairs.
     */
    readonly props: PropDefinitions<API['props']>;
    /**
     * The store that will be exposed to the component and children.
     */
    readonly store: API['store'];
    /**
     * CSS styles that should be adopted by the shadow root. Note that these styles are only applied
     * if the `shadowRoot` option is truthy.
     */
    readonly css?: CSS[];
    /**
     * Whether hydration should never occur.
     */
    readonly nohydrate?: boolean;
}
/** Ensuring props/store is only required when declared. */
export type CustomElementDeclaration<API extends ComponentAPI, Definition = Omit<CustomElementDefinition<API>, 'props'>> = IfAny<API['props'], IfAny<API['store'], Omit<Definition, 'props' | 'store'> & {
    props?: PropDeclarations<any>;
    store?: StoreFactory<any>;
}, Omit<Definition, 'props'> & {
    props?: PropDeclarations<any>;
}>, IfAny<API['store'], Omit<Definition, 'store'> & {
    store?: StoreFactory<any>;
}, keyof API['props'] extends never ? keyof API['store'] extends never ? Omit<Definition, 'props' | 'store'> : Omit<Definition, 'props'> : (keyof API['store'] extends never ? Omit<Definition, 'store'> : Definition) & {
    props: PropDeclarations<API['props']>;
}>>;
export declare const STRING: AttributeType<string | null>;
export declare const NUMBER: AttributeType<number | null>;
export declare const BOOLEAN: AttributeType<boolean | null>;
export declare const FUNCTION: AttributeType<(() => void) | null>;
export declare const ARRAY: AttributeType<unknown[] | null>;
export declare const OBJECT: AttributeType<object | null>;
export declare function inferAttributeType(value: unknown): AttributeType<any>;
