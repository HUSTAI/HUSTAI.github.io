{"version":3,"file":"index.mjs","sources":["../src/plugin.ts"],"sourcesContent":["/**\n * Forked from https://github.com/tani/markdown-it-mathjax3/blob/master/index.ts\n */\n\nimport { createRequire } from \"node:module\";\n\nimport { tex } from \"@mdit/plugin-tex\";\nimport { type PluginWithOptions } from \"markdown-it\";\nimport { AssistiveMmlHandler } from \"mathjax-full/js/a11y/assistive-mml.js\";\nimport { LiteDocument } from \"mathjax-full/js/adaptors/lite/Document.js\";\nimport {\n  type LiteElement,\n  type LiteNode,\n} from \"mathjax-full/js/adaptors/lite/Element.js\";\nimport { LiteText } from \"mathjax-full/js/adaptors/lite/Text.js\";\nimport {\n  type LiteAdaptor,\n  liteAdaptor,\n} from \"mathjax-full/js/adaptors/liteAdaptor.js\";\nimport { RegisterHTMLHandler } from \"mathjax-full/js/handlers/html.js\";\nimport { AllPackages } from \"mathjax-full/js/input/tex/AllPackages.js\";\nimport { TeX } from \"mathjax-full/js/input/tex.js\";\nimport { mathjax as MathJax } from \"mathjax-full/js/mathjax.js\";\nimport { CHTML } from \"mathjax-full/js/output/chtml.js\";\nimport { SVG } from \"mathjax-full/js/output/svg.js\";\nimport path from \"upath\";\n\nimport { type MarkdownItMathjaxOptions } from \"./options.js\";\n\nexport interface DocumentOptions {\n  InputJax: TeX<LiteElement, string, HTMLElement>;\n  OutputJax:\n    | CHTML<LiteElement, string, HTMLElement>\n    | SVG<LiteElement, string, HTMLElement>;\n  enableAssistiveMml: boolean;\n}\n\nexport const getDocumentOptions = (\n  options: MarkdownItMathjaxOptions\n): DocumentOptions => ({\n  InputJax: new TeX<LiteElement, string, HTMLElement>({\n    packages: AllPackages,\n    ...options.tex,\n  }),\n  OutputJax:\n    options.output === \"chtml\"\n      ? new CHTML<LiteElement, string, HTMLElement>({\n          fontURL: path.dirname(\n            createRequire(import.meta.url).resolve(\n              \"mathjax-full/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff\"\n            )\n          ),\n          adaptiveCSS: true,\n          ...options.chtml,\n        })\n      : new SVG<LiteElement, string, HTMLElement>({\n          fontCache: \"none\",\n          ...options.svg,\n        }),\n  enableAssistiveMml: options.a11y !== false,\n});\n\n/**\n * Mathjax instance\n */\nexport interface MathjaxInstance {\n  /**\n   * Mathjax adaptor\n   */\n  adaptor: LiteAdaptor;\n\n  /**\n   * Mathjax document options\n   */\n  documentOptions: DocumentOptions;\n\n  /**\n   * Whether parsed fence block with math language to display mode math\n   */\n  mathFence?: boolean;\n  /**\n   * Clear style cache\n   */\n  clearStyle: () => void;\n\n  /**\n   * Output style for rendered content and clears it\n   *\n   * @returns style\n   */\n  outputStyle: () => string;\n\n  /**\n   * Reset tex (including labels)\n   */\n  reset: () => void;\n}\n\nexport const createMathjaxInstance = (\n  options: MarkdownItMathjaxOptions = {}\n): MathjaxInstance | null => {\n  const documentOptions = getDocumentOptions(options);\n  const adaptor = liteAdaptor();\n\n  const handler = RegisterHTMLHandler(adaptor);\n\n  if (options.a11y !== false)\n    AssistiveMmlHandler<LiteNode, LiteText, LiteDocument>(handler);\n\n  const { OutputJax, InputJax } = documentOptions;\n\n  const clearStyle = (): void => {\n    // clear style cache\n    if (OutputJax instanceof CHTML) OutputJax.clearCache();\n  };\n\n  const reset = (): void => {\n    InputJax.reset();\n  };\n\n  const outputStyle = (): string => {\n    const style = adaptor.innerHTML(\n      documentOptions.OutputJax.styleSheet(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        MathJax.document(\"\", documentOptions)\n      )\n    );\n\n    clearStyle();\n\n    return style;\n  };\n\n  return {\n    adaptor,\n    documentOptions,\n    mathFence: options.mathFence ?? false,\n    clearStyle,\n    reset,\n    outputStyle,\n  };\n};\n\nexport const mathjax: PluginWithOptions<MathjaxInstance> = (md, options) => {\n  const { adaptor, documentOptions, mathFence = false } = options!;\n\n  md.use(tex, {\n    mathFence,\n    render: (content, displayMode) => {\n      /* eslint-disable */\n      const mathDocument = MathJax.document(content, documentOptions).convert(\n        content,\n        { display: displayMode }\n      );\n      return adaptor.outerHTML(mathDocument);\n    },\n  });\n};\n"],"names":["getDocumentOptions","options","TeX","AllPackages","CHTML","path","createRequire","SVG","createMathjaxInstance","documentOptions","adaptor","liteAdaptor","handler","RegisterHTMLHandler","AssistiveMmlHandler","OutputJax","InputJax","clearStyle","reset","outputStyle","style","MathJax","mathjax","md","mathFence","tex","content","displayMode","mathDocument"],"mappings":"szBAqCaA,EACXC,IACqB,CACrB,SAAU,IAAIC,EAAsC,CAClD,SAAUC,EACV,GAAGF,EAAQ,GACb,CAAC,EACD,UACEA,EAAQ,SAAW,QACf,IAAIG,EAAwC,CAC1C,QAASC,EAAK,QACZC,EAAc,YAAY,GAAG,EAAE,QAC7B,+DACF,CACF,EACA,YAAa,GACb,GAAGL,EAAQ,KACb,CAAC,EACD,IAAIM,EAAsC,CACxC,UAAW,OACX,GAAGN,EAAQ,GACb,CAAC,EACP,mBAAoBA,EAAQ,OAAS,EACvC,GAsCaO,EAAwB,CACnCP,EAAoC,KACT,CAC3B,MAAMQ,EAAkBT,EAAmBC,CAAO,EAC5CS,EAAUC,EAAAA,EAEVC,EAAUC,EAAoBH,CAAO,EAEvCT,EAAQ,OAAS,IACnBa,EAAsDF,CAAO,EAE/D,KAAM,CAAE,UAAAG,EAAW,SAAAC,CAAS,EAAIP,EAE1BQ,EAAa,IAAY,CAEzBF,aAAqBX,GAAOW,EAAU,WAAW,CACvD,EAEMG,EAAQ,IAAY,CACxBF,EAAS,MAAA,CACX,EAEMG,EAAc,IAAc,CAChC,MAAMC,EAAQV,EAAQ,UACpBD,EAAgB,UAAU,WAExBY,EAAQ,SAAS,GAAIZ,CAAe,CACtC,CACF,EAEA,OAAAQ,IAEOG,CACT,EAEA,MAAO,CACL,QAAAV,EACA,gBAAAD,EACA,UAAWR,EAAQ,WAAa,GAChC,WAAAgB,EACA,MAAAC,EACA,YAAAC,CACF,CACF,EAEaG,EAA8C,CAACC,EAAItB,IAAY,CAC1E,KAAM,CAAE,QAAAS,EAAS,gBAAAD,EAAiB,UAAAe,EAAY,EAAM,EAAIvB,EAExDsB,EAAG,IAAIE,EAAK,CACV,UAAAD,EACA,OAAQ,CAACE,EAASC,IAAgB,CAEhC,MAAMC,EAAeP,EAAQ,SAASK,EAASjB,CAAe,EAAE,QAC9DiB,EACA,CAAE,QAASC,CAAY,CACzB,EACA,OAAOjB,EAAQ,UAAUkB,CAAY,CACvC,CACF,CAAC,CACH"}