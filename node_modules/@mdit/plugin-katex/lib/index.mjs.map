{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/plugin.ts"],"sourcesContent":["export const escapeHtml = (unsafeHTML: string): string =>\n  unsafeHTML\n    .replace(/&/gu, \"&amp;\")\n    .replace(/</gu, \"&lt;\")\n    .replace(/>/gu, \"&gt;\")\n    .replace(/\"/gu, \"&quot;\")\n    .replace(/'/gu, \"&#039;\");\n","import { createRequire } from \"node:module\";\n\nimport { tex } from \"@mdit/plugin-tex\";\nimport Katex, { type KatexOptions as OriginalKatexOptions } from \"katex\";\nimport type MarkdownIt from \"markdown-it\";\n\nimport { type KatexToken, type MarkdownItKatexOptions } from \"./options.js\";\nimport { escapeHtml } from \"./utils.js\";\n\nconst require = createRequire(import.meta.url);\n\nconst katexInline = (tex: string, options: OriginalKatexOptions): string => {\n  try {\n    return Katex.renderToString(tex, { ...options, displayMode: false });\n  } catch (error) {\n    if (options.throwOnError) console.warn(error);\n\n    return `<span class='katex-error' title='${escapeHtml(\n      (error as Error).toString()\n    )}'>${escapeHtml(tex)}</span>`;\n  }\n};\n\nconst katexBlock = (tex: string, options: OriginalKatexOptions): string => {\n  try {\n    return `<p class='katex-block'>${Katex.renderToString(tex, {\n      ...options,\n      displayMode: true,\n    })}</p>\\n`;\n  } catch (error) {\n    if (options.throwOnError) console.warn(error);\n\n    return `<p class='katex-block katex-error' title='${escapeHtml(\n      (error as Error).toString()\n    )}'>${escapeHtml(tex)}</p>\\n`;\n  }\n};\n\nexport const katex = <MarkdownItEnv = unknown>(\n  md: MarkdownIt,\n  options: MarkdownItKatexOptions<MarkdownItEnv> = {}\n): void => {\n  const {\n    mathFence = false,\n    mhchem = false,\n    logger = (errorCode: string): string =>\n      errorCode === \"newLineInDisplayMode\" ? \"ignore\" : \"warn\",\n    ...userOptions\n  } = options;\n\n  if (mhchem) require(\"katex/contrib/mhchem\");\n\n  md.use(tex, {\n    mathFence,\n    render: (content: string, displayMode: boolean, env: MarkdownItEnv) => {\n      const katexOptions = {\n        strict: (\n          errorCode:\n            | \"unknownSymbol\"\n            | \"unicodeTextInMathMode\"\n            | \"mathVsTextUnits\"\n            | \"commentAtEnd\"\n            | \"htmlExtension\"\n            | \"newLineInDisplayMode\",\n          errorMsg: string,\n          token: KatexToken\n        ): string => logger(errorCode, errorMsg, token, env) ?? \"ignore\",\n        throwOnError: false,\n        ...userOptions,\n      };\n\n      return displayMode\n        ? katexBlock(content, katexOptions)\n        : katexInline(content, katexOptions);\n    },\n  });\n};\n"],"names":["escapeHtml","unsafeHTML","require","createRequire","katexInline","tex","options","Katex","error","katexBlock","katex","md","mathFence","mhchem","logger","errorCode","userOptions","content","displayMode","env","katexOptions","errorMsg","token"],"mappings":"wGAAa,MAAAA,EAAcC,GACzBA,EACG,QAAQ,MAAO,OAAO,EACtB,QAAQ,MAAO,MAAM,EACrB,QAAQ,MAAO,MAAM,EACrB,QAAQ,MAAO,QAAQ,EACvB,QAAQ,MAAO,QAAQ,ECGtBC,EAAUC,EAAc,YAAY,GAAG,EAEvCC,EAAc,CAACC,EAAaC,IAA0C,CAC1E,GAAI,CACF,OAAOC,EAAM,eAAeF,EAAK,CAAE,GAAGC,EAAS,YAAa,EAAM,CAAC,CACrE,OAASE,EAAAA,CACP,OAAIF,EAAQ,cAAc,QAAQ,KAAKE,CAAK,EAErC,oCAAoCR,EACxCQ,EAAgB,SAAS,CAC5B,MAAMR,EAAWK,CAAG,UACtB,CACF,EAEMI,EAAa,CAACJ,EAAaC,IAA0C,CACzE,GAAI,CACF,MAAO,0BAA0BC,EAAM,eAAeF,EAAK,CACzD,GAAGC,EACH,YAAa,EACf,CAAC;AAAA,CACH,OAASE,GACP,OAAIF,EAAQ,cAAc,QAAQ,KAAKE,CAAK,EAErC,6CAA6CR,EACjDQ,EAAgB,UACnB,MAAMR,EAAWK,CAAG;AAAA,CACtB,CACF,EAEaK,EAAQ,CACnBC,EACAL,EAAiD,CAAA,IACxC,CACT,KAAM,CACJ,UAAAM,EAAY,GACZ,OAAAC,EAAS,GACT,OAAAC,EAAUC,GACRA,IAAc,uBAAyB,SAAW,OACpD,GAAGC,CACL,EAAIV,EAEAO,GAAQX,EAAQ,sBAAsB,EAE1CS,EAAG,IAAIN,EAAK,CACV,UAAAO,EACA,OAAQ,CAACK,EAAiBC,EAAsBC,IAAuB,CACrE,MAAMC,EAAe,CACnB,OAAQ,CACNL,EAOAM,EACAC,IACWR,EAAOC,EAAWM,EAAUC,EAAOH,CAAG,GAAK,SACxD,aAAc,GACd,GAAGH,CACL,EAEA,OAAOE,EACHT,EAAWQ,EAASG,CAAY,EAChChB,EAAYa,EAASG,CAAY,CACvC,CACF,CAAC,CACH"}