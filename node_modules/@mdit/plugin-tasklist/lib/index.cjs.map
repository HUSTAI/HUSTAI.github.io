{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/plugin.ts"],"sourcesContent":["import type Token from \"markdown-it/lib/token.js\";\n\nexport const setTokenAttr = (\n  token: Token,\n  name: string,\n  value: string\n): void => {\n  const index = token.attrIndex(name);\n  const attr: [string, string] = [name, value];\n\n  if (index < 0) token.attrPush(attr);\n  else token.attrs![index] = attr;\n};\n\nexport const getParentTokenIndex = (tokens: Token[], index: number): number => {\n  const targetLevel = tokens[index].level - 1;\n\n  for (let i = index - 1; i >= 0; i--)\n    if (tokens[i].level === targetLevel) return i;\n\n  return -1;\n};\n\nexport const isInlineToken = (token?: Token): boolean =>\n  token?.type === \"inline\";\n\nexport const isParagraphToken = (token?: Token): boolean =>\n  token?.type === \"paragraph_open\";\n\nexport const isListItemToken = (token?: Token): boolean =>\n  token?.type === \"list_item_open\";\n","/**\n * Forked from https://github.com/linsir/markdown-it-task-checkbox/blob/master/index.js\n */\n\nimport { type PluginWithOptions } from \"markdown-it\";\nimport type StateCore from \"markdown-it/lib/rules_core/state_core.js\";\nimport Token from \"markdown-it/lib/token.js\";\n\nimport { type MarkdownItTaskListOptions } from \"./options.js\";\nimport { type TaskListEnv } from \"./types.js\";\nimport {\n  getParentTokenIndex,\n  isInlineToken,\n  isListItemToken,\n  isParagraphToken,\n  setTokenAttr,\n} from \"./utils.js\";\n\ninterface TaskListStateCore extends StateCore {\n  env: TaskListEnv;\n}\n// The leading whitespace in a list item (token.content) is already trimmed off by markdown-it.\n// The regex below checks for '[ ] ' or '[x] ' or '[X] ' at the start of the string token.content,\n// where the space is either a normal space or a non-breaking space (character 160 = \\u00A0).\nconst startsWithTodoMarkdown = (token: Token): boolean =>\n  /^\\[[xX \\u00A0]\\][ \\u00A0]/.test(token.content);\n\nconst isTaskListItem = (tokens: Token[], index: number): boolean =>\n  isInlineToken(tokens[index]) &&\n  isParagraphToken(tokens[index - 1]) &&\n  isListItemToken(tokens[index - 2]) &&\n  startsWithTodoMarkdown(tokens[index]);\n\nconst generateCheckbox = (\n  token: Token,\n  id: string,\n  {\n    checkboxClass,\n    disabled,\n  }: Required<Pick<MarkdownItTaskListOptions, \"checkboxClass\" | \"disabled\">>\n): Token => {\n  const checkbox = new Token(\"checkbox_input\", \"input\", 0);\n\n  checkbox.attrs = [\n    [\"type\", \"checkbox\"],\n    [\"class\", checkboxClass],\n    [\"id\", id],\n  ];\n\n  // if token.content starts with '[x] ' or '[X] '\n  if (/^\\[[xX]\\][ \\u00A0]/.test(token.content))\n    checkbox.attrs.push([\"checked\", \"checked\"]);\n\n  if (disabled) checkbox.attrs.push([\"disabled\", \"disabled\"]);\n\n  return checkbox;\n};\n\nconst beginLabel = (id: string, labelClass: string): Token => {\n  const label = new Token(\"label_open\", \"label\", 1);\n\n  label.attrs = [\n    [\"class\", labelClass],\n    [\"for\", id],\n  ];\n\n  return label;\n};\n\nconst endLabel = (): Token => new Token(\"label_close\", \"label\", -1);\n\nconst addCheckBox = (\n  token: Token,\n  state: TaskListStateCore,\n  {\n    disabled,\n    checkboxClass,\n    label,\n    labelClass,\n  }: Required<Omit<MarkdownItTaskListOptions, \"containerClass\" | \"itemClass\">>\n): void => {\n  const id = `task-item-${state.env.tasklists++}`;\n\n  token.children = token.children || [];\n\n  // remove the checkbox syntax letter\n  token.children[0].content = token.children[0].content.slice(3);\n\n  if (label) {\n    // add label\n    token.children.unshift(beginLabel(id, labelClass));\n    token.children.push(endLabel());\n  }\n  // checkbox\n  token.children.unshift(\n    generateCheckbox(token, id, { checkboxClass, disabled })\n  );\n};\n\nexport const tasklist: PluginWithOptions<MarkdownItTaskListOptions> = (\n  md,\n  {\n    disabled = true,\n    label = true,\n    containerClass = \"task-list-container\",\n    itemClass = \"task-list-item\",\n    checkboxClass = \"task-list-item-checkbox\",\n    labelClass = \"task-list-item-label\",\n  } = {}\n) => {\n  md.core.ruler.after(\n    \"inline\",\n    \"github-task-lists\",\n    (state: TaskListStateCore) => {\n      const tokens = state.tokens;\n\n      if (!state.env.tasklists) state.env.tasklists = 0;\n\n      for (let i = 2; i < tokens.length; i++)\n        if (isTaskListItem(tokens, i)) {\n          addCheckBox(tokens[i], state, {\n            disabled,\n            label,\n            checkboxClass,\n            labelClass,\n          });\n          setTokenAttr(tokens[i - 2], \"class\", itemClass);\n          setTokenAttr(\n            tokens[getParentTokenIndex(tokens, i - 2)],\n            \"class\",\n            containerClass\n          );\n        }\n\n      return true;\n    }\n  );\n};\n"],"names":["setTokenAttr","token","name","value","index","attr","getParentTokenIndex","tokens","targetLevel","i","isInlineToken","isParagraphToken","isListItemToken","startsWithTodoMarkdown","isTaskListItem","generateCheckbox","id","checkboxClass","disabled","checkbox","Token","beginLabel","labelClass","label","endLabel","addCheckBox","state","tasklist","md","containerClass","itemClass"],"mappings":"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"}