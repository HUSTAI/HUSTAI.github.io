{"version":3,"file":"index.cjs","sources":["../src/plugin.ts"],"sourcesContent":["/**\n * Forked from https://github.com/waylonflinn/markdown-it-katex/blob/master/index.js\n */\n\nimport { type PluginWithOptions } from \"markdown-it\";\nimport { type RuleBlock } from \"markdown-it/lib/parser_block.js\";\nimport { type RuleInline } from \"markdown-it/lib/parser_inline.js\";\nimport type StateInline from \"markdown-it/lib/rules_inline/state_inline.js\";\n\nimport { type MarkdownItTexOptions } from \"./options.js\";\n\n/*\n * Test if potential opening or closing delimiter\n * Assumes that there is a \"$\" at state.src[pos]\n */\nconst isValidDelim = (\n  state: StateInline,\n  pos: number\n): { canOpen: boolean; canClose: boolean } => {\n  const prevChar = pos > 0 ? state.src.charAt(pos - 1) : \"\";\n  const nextChar = pos + 1 <= state.posMax ? state.src.charAt(pos + 1) : \"\";\n\n  return {\n    canOpen: nextChar !== \" \" && nextChar !== \"\\t\",\n\n    /*\n     * Check non-whitespace conditions for opening and closing, and\n     * check that closing delimiter isnâ€™t followed by a number\n     */\n    canClose: !(\n      prevChar === \" \" ||\n      prevChar === \"\\t\" ||\n      /[0-9]/u.exec(nextChar)\n    ),\n  };\n};\n\nconst inlineTex: RuleInline = (state, silent) => {\n  let match;\n  let pos;\n  let res;\n  let token;\n\n  if (state.src[state.pos] !== \"$\") return false;\n\n  res = isValidDelim(state, state.pos);\n  if (!res.canOpen) {\n    if (!silent) state.pending += \"$\";\n\n    state.pos += 1;\n\n    return true;\n  }\n\n  /*\n   * First check for and bypass all properly escaped delimiters\n   * This loop will assume that the first leading backtick can not\n   * be the first character in state.src, which is known since\n   * we have found an opening delimiter already.\n   */\n  const start = state.pos + 1;\n\n  match = start;\n  while ((match = state.src.indexOf(\"$\", match)) !== -1) {\n    /*\n     * Found potential $, look for escapes, pos will point to\n     * first non escape when complete\n     */\n    pos = match - 1;\n    while (state.src[pos] === \"\\\\\") pos -= 1;\n\n    // Even number of escapes, potential closing delimiter found\n    if ((match - pos) % 2 === 1) break;\n\n    match += 1;\n  }\n\n  // No closing delimiter found.  Consume $ and continue.\n  if (match === -1) {\n    if (!silent) state.pending += \"$\";\n\n    state.pos = start;\n\n    return true;\n  }\n\n  // Check if we have empty content, ie: $$.  Do not parse.\n  if (match - start === 0) {\n    if (!silent) state.pending += \"$$\";\n\n    state.pos = start + 1;\n\n    return true;\n  }\n\n  // Check for valid closing delimiter\n  res = isValidDelim(state, match);\n\n  if (!res.canClose) {\n    if (!silent) state.pending += \"$\";\n\n    state.pos = start;\n\n    return true;\n  }\n\n  if (!silent) {\n    token = state.push(\"math_inline\", \"math\", 0);\n    token.markup = \"$\";\n    token.content = state.src.slice(start, match);\n  }\n\n  state.pos = match + 1;\n\n  return true;\n};\n\nconst blockTex: RuleBlock = (state, start, end, silent) => {\n  let firstLine;\n  let lastLine;\n  let next;\n  let lastPos;\n  let found = false;\n  let pos = state.bMarks[start] + state.tShift[start];\n  let max = state.eMarks[start];\n\n  if (pos + 2 > max) return false;\n\n  if (state.src.slice(pos, pos + 2) !== \"$$\") return false;\n\n  pos += 2;\n  firstLine = state.src.slice(pos, max);\n\n  if (silent) return true;\n\n  if (firstLine.trim().endsWith(\"$$\")) {\n    // Single line expression\n    firstLine = firstLine.trim().slice(0, -2);\n    found = true;\n  }\n\n  for (next = start; !found; ) {\n    next += 1;\n\n    if (next >= end) break;\n\n    pos = state.bMarks[next] + state.tShift[next];\n    max = state.eMarks[next];\n\n    if (pos < max && state.tShift[next] < state.blkIndent)\n      // non-empty line with negative indent should stop the list:\n      break;\n\n    if (state.src.slice(pos, max).trim().endsWith(\"$$\")) {\n      lastPos = state.src.slice(0, max).lastIndexOf(\"$$\");\n      lastLine = state.src.slice(pos, lastPos);\n      found = true;\n    }\n  }\n\n  state.line = next + 1;\n\n  const token = state.push(\"math_block\", \"math\", 0);\n\n  token.block = true;\n  token.content =\n    (firstLine?.trim() ? `\\n${firstLine}\\n` : \"\\n\") +\n    state.getLines(start + 1, next, state.tShift[start], true) +\n    (lastLine?.trim() ? lastLine : \"\");\n  token.map = [start, state.line];\n  token.markup = \"$$\";\n\n  return true;\n};\n\nexport const tex: PluginWithOptions<MarkdownItTexOptions> = (md, options) => {\n  const { mathFence = false, render } = options || {};\n\n  if (typeof render !== \"function\")\n    throw new Error('[@mdit/plugin-tex]: \"render\" option should be a function');\n\n  // Handle ```math blocks\n  if (mathFence) {\n    const fence = md.renderer.rules.fence;\n\n    md.renderer.rules.fence = (...args): string => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const [tokens, index, , env] = args;\n      const { content, info } = tokens[index];\n\n      if (info.trim() === \"math\") return render(content, true, env);\n\n      return fence!(...args);\n    };\n  }\n\n  md.inline.ruler.after(\"escape\", \"math_inline\", inlineTex);\n  md.block.ruler.after(\"blockquote\", \"math_block\", blockTex, {\n    alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\"],\n  });\n\n  md.renderer.rules[\"math_inline\"] = (tokens, index, _options, env): string =>\n    render(tokens[index].content, false, env);\n  md.renderer.rules[\"math_block\"] = (tokens, index, _options, env): string =>\n    render(tokens[index].content, true, env);\n};\n"],"names":["isValidDelim","state","pos","prevChar","nextChar","inlineTex","silent","match","res","token","start","blockTex","end","firstLine","lastLine","next","lastPos","found","max","tex","md","options","mathFence","render","fence","args","tokens","index","env","content","info","_options"],"mappings":"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"}