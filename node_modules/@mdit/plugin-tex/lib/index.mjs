const f=(r,t)=>{const c=t>0?r.src.charAt(t-1):"",i=t+1<=r.posMax?r.src.charAt(t+1):"";return{canOpen:i!==" "&&i!=="	",canClose:!(c===" "||c==="	"||/[0-9]/u.exec(i))}},h=(r,t)=>{let c,i,s,e;if(r.src[r.pos]!=="$")return!1;if(s=f(r,r.pos),!s.canOpen)return t||(r.pending+="$"),r.pos+=1,!0;const n=r.pos+1;for(c=n;(c=r.src.indexOf("$",c))!==-1;){for(i=c-1;r.src[i]==="\\";)i-=1;if((c-i)%2===1)break;c+=1}return c===-1?(t||(r.pending+="$"),r.pos=n,!0):c-n===0?(t||(r.pending+="$$"),r.pos=n+1,!0):(s=f(r,c),s.canClose?(t||(e=r.push("math_inline","math",0),e.markup="$",e.content=r.src.slice(n,c)),r.pos=c+1,!0):(t||(r.pending+="$"),r.pos=n,!0))},m=(r,t,c,i)=>{let s,e,n,l,p=!1,o=r.bMarks[t]+r.tShift[t],a=r.eMarks[t];if(o+2>a||r.src.slice(o,o+2)!=="$$")return!1;if(o+=2,s=r.src.slice(o,a),i)return!0;for(s.trim().endsWith("$$")&&(s=s.trim().slice(0,-2),p=!0),n=t;!p&&(n+=1,!(n>=c||(o=r.bMarks[n]+r.tShift[n],a=r.eMarks[n],o<a&&r.tShift[n]<r.blkIndent)));)r.src.slice(o,a).trim().endsWith("$$")&&(l=r.src.slice(0,a).lastIndexOf("$$"),e=r.src.slice(o,l),p=!0);r.line=n+1;const u=r.push("math_block","math",0);return u.block=!0,u.content=(s!=null&&s.trim()?`
${s}
`:`
`)+r.getLines(t+1,n,r.tShift[t],!0)+(e!=null&&e.trim()?e:""),u.map=[t,r.line],u.markup="$$",!0},$=(r,t)=>{const{mathFence:c=!1,render:i}=t||{};if(typeof i!="function")throw new Error('[@mdit/plugin-tex]: "render" option should be a function');if(c){const s=r.renderer.rules.fence;r.renderer.rules.fence=(...e)=>{const[n,l,,p]=e,{content:o,info:a}=n[l];return a.trim()==="math"?i(o,!0,p):s(...e)}}r.inline.ruler.after("escape","math_inline",h),r.block.ruler.after("blockquote","math_block",m,{alt:["paragraph","reference","blockquote","list"]}),r.renderer.rules.math_inline=(s,e,n,l)=>i(s[e].content,!1,l),r.renderer.rules.math_block=(s,e,n,l)=>i(s[e].content,!0,l)};export{$ as tex};
//# sourceMappingURL=index.mjs.map
