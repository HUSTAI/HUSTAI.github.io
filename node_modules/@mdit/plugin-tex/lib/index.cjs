"use strict";const f=(r,t)=>{const s=t>0?r.src.charAt(t-1):"",i=t+1<=r.posMax?r.src.charAt(t+1):"";return{canOpen:i!==" "&&i!=="	",canClose:!(s===" "||s==="	"||/[0-9]/u.exec(i))}},h=(r,t)=>{let s,i,c,e;if(r.src[r.pos]!=="$")return!1;if(c=f(r,r.pos),!c.canOpen)return t||(r.pending+="$"),r.pos+=1,!0;const n=r.pos+1;for(s=n;(s=r.src.indexOf("$",s))!==-1;){for(i=s-1;r.src[i]==="\\";)i-=1;if((s-i)%2===1)break;s+=1}return s===-1?(t||(r.pending+="$"),r.pos=n,!0):s-n===0?(t||(r.pending+="$$"),r.pos=n+1,!0):(c=f(r,s),c.canClose?(t||(e=r.push("math_inline","math",0),e.markup="$",e.content=r.src.slice(n,s)),r.pos=s+1,!0):(t||(r.pending+="$"),r.pos=n,!0))},m=(r,t,s,i)=>{let c,e,n,l,u=!1,o=r.bMarks[t]+r.tShift[t],a=r.eMarks[t];if(o+2>a||r.src.slice(o,o+2)!=="$$")return!1;if(o+=2,c=r.src.slice(o,a),i)return!0;for(c.trim().endsWith("$$")&&(c=c.trim().slice(0,-2),u=!0),n=t;!u&&(n+=1,!(n>=s||(o=r.bMarks[n]+r.tShift[n],a=r.eMarks[n],o<a&&r.tShift[n]<r.blkIndent)));)r.src.slice(o,a).trim().endsWith("$$")&&(l=r.src.slice(0,a).lastIndexOf("$$"),e=r.src.slice(o,l),u=!0);r.line=n+1;const p=r.push("math_block","math",0);return p.block=!0,p.content=(c!=null&&c.trim()?`
${c}
`:`
`)+r.getLines(t+1,n,r.tShift[t],!0)+(e!=null&&e.trim()?e:""),p.map=[t,r.line],p.markup="$$",!0},$=(r,t)=>{const{mathFence:s=!1,render:i}=t||{};if(typeof i!="function")throw new Error('[@mdit/plugin-tex]: "render" option should be a function');if(s){const c=r.renderer.rules.fence;r.renderer.rules.fence=(...e)=>{const[n,l,,u]=e,{content:o,info:a}=n[l];return a.trim()==="math"?i(o,!0,u):c(...e)}}r.inline.ruler.after("escape","math_inline",h),r.block.ruler.after("blockquote","math_block",m,{alt:["paragraph","reference","blockquote","list"]}),r.renderer.rules.math_inline=(c,e,n,l)=>i(c[e].content,!1,l),r.renderer.rules.math_block=(c,e,n,l)=>i(c[e].content,!0,l)};exports.tex=$;
//# sourceMappingURL=index.cjs.map
