{"version":3,"file":"index.mjs","sources":["../src/plugin.ts"],"sourcesContent":["import { type PluginWithOptions } from \"markdown-it\";\nimport type Token from \"markdown-it/lib/token.js\";\n\nimport {\n  type MarkdownItStylizeConfig,\n  type MarkdownItStylizeOptions,\n} from \"./options.js\";\n\nconst scanTokens = (\n  tokens: Token[],\n  config: MarkdownItStylizeConfig[],\n  skipContents: string[] = []\n): void => {\n  for (let index = 1, len = tokens.length; index < len - 1; index++) {\n    const token = tokens[index];\n    const { content, type } = token;\n\n    // skip current token\n    if (type !== \"text\" || skipContents.includes(content)) continue;\n\n    const configItem = config.find(({ matcher }) =>\n      typeof matcher === \"string\" ? matcher === content : matcher.test(content)\n    );\n    const tokenPrev = tokens[index - 1];\n    const tokenNext = tokens[index + 1];\n\n    if (\n      configItem &&\n      tokenPrev.tag === tokenNext.tag &&\n      tokenPrev.nesting === 1 &&\n      tokenNext.nesting === -1\n    ) {\n      const result = configItem.replacer({\n        tag: tokenPrev.tag,\n        content: token.content,\n        attrs: Object.fromEntries(tokenPrev.attrs || []),\n      });\n\n      if (result) {\n        tokenPrev.tag = tokenNext.tag = result.tag;\n        tokenPrev.attrs = Object.entries(result.attrs);\n        token.content = result.content;\n      }\n\n      // skip 2 tokens\n      index += 2;\n    }\n  }\n};\n\nexport const stylize: PluginWithOptions<MarkdownItStylizeOptions> = (\n  md,\n  options = {}\n) => {\n  if (options.config?.length == 0) return;\n\n  md.core.ruler.push(\"stylize_tag\", ({ env, tokens }) => {\n    const localConfig = options.localConfigGetter?.(env) ?? [];\n\n    tokens.forEach(({ type, children }) => {\n      if (type === \"inline\" && children)\n        scanTokens(children, [\n          // local config has higher priority\n          ...localConfig,\n          ...(options.config ?? []),\n        ]);\n    });\n  });\n};\n"],"names":["scanTokens","tokens","config","skipContents","index","len","token","content","type","configItem","matcher","tokenPrev","tokenNext","result","stylize","md","options","_a","env","localConfig","children"],"mappings":"AAQA,MAAMA,EAAa,CACjBC,EACAC,EACAC,EAAyB,CAAA,IAChB,CACT,QAASC,EAAQ,EAAGC,EAAMJ,EAAO,OAAQG,EAAQC,EAAM,EAAGD,IAAS,CACjE,MAAME,EAAQL,EAAOG,CAAK,EACpB,CAAE,QAAAG,EAAS,KAAAC,CAAK,EAAIF,EAG1B,GAAIE,IAAS,QAAUL,EAAa,SAASI,CAAO,EAAG,SAEvD,MAAME,EAAaP,EAAO,KAAK,CAAC,CAAE,QAAAQ,CAAQ,IACxC,OAAOA,GAAY,SAAWA,IAAYH,EAAUG,EAAQ,KAAKH,CAAO,CAC1E,EACMI,EAAYV,EAAOG,EAAQ,CAAC,EAC5BQ,EAAYX,EAAOG,EAAQ,CAAC,EAElC,GACEK,GACAE,EAAU,MAAQC,EAAU,KAC5BD,EAAU,UAAY,GACtBC,EAAU,UAAY,GACtB,CACA,MAAMC,EAASJ,EAAW,SAAS,CACjC,IAAKE,EAAU,IACf,QAASL,EAAM,QACf,MAAO,OAAO,YAAYK,EAAU,OAAS,CAAA,CAAE,CACjD,CAAC,EAEGE,IACFF,EAAU,IAAMC,EAAU,IAAMC,EAAO,IACvCF,EAAU,MAAQ,OAAO,QAAQE,EAAO,KAAK,EAC7CP,EAAM,QAAUO,EAAO,SAIzBT,GAAS,GAGf,EAEaU,EAAuD,CAClEC,EACAC,EAAU,CAAA,IACP,CArDL,IAAAC,IAsDMA,EAAAD,EAAQ,SAAR,KAAA,OAAAC,EAAgB,SAAU,GAE9BF,EAAG,KAAK,MAAM,KAAK,cAAe,CAAC,CAAE,IAAAG,EAAK,OAAAjB,CAAO,IAAM,CAxDzD,IAAAgB,EAyDI,MAAME,IAAcF,EAAAD,EAAQ,oBAAR,KAAAC,OAAAA,EAAA,KAAAD,EAA4BE,CAAAA,IAAQ,CAAA,EAExDjB,EAAO,QAAQ,CAAC,CAAE,KAAAO,EAAM,SAAAY,CAAS,IAAM,CACjCZ,IAAS,UAAYY,GACvBpB,EAAWoB,EAAU,CAEnB,GAAGD,EACH,GAAIH,EAAQ,QAAU,CACxB,CAAA,CAAC,CACL,CAAC,CACH,CAAC,CACH"}