{"version":3,"file":"index.js","sources":["../../src/node/utils.ts","../../src/node/compact/utils.ts","../../src/node/compact/convert.ts","../../src/node/generateSitemap.ts","../../src/node/plugin.ts"],"sourcesContent":["import { getDirname, path } from \"@vuepress/utils\";\nimport { Logger, ensureEndingSlash } from \"vuepress-shared/node\";\n\nconst __dirname = getDirname(import.meta.url);\n\nexport const TEMPLATE_FOLDER = ensureEndingSlash(\n  path.resolve(__dirname, \"../../templates\")\n);\n\nexport const PLUGIN_NAME = \"vuepress-plugin-sitemap2\";\n\nexport const logger = new Logger(PLUGIN_NAME);\n","import { colors } from \"@vuepress/utils\";\n\nimport { logger } from \"../utils.js\";\n\nexport interface DeprecatedLoggerOptions {\n  options: Record<string, unknown>;\n  deprecatedOption: string;\n  newOption: string;\n  msg?: string;\n  scope?: string;\n}\n\nexport const deprecatedLogger = ({\n  options,\n  deprecatedOption,\n  newOption,\n  msg = \"\",\n  scope = \"\",\n}: DeprecatedLoggerOptions): void => {\n  if (deprecatedOption in options) {\n    logger.warn(\n      `${colors.magenta(deprecatedOption)} is ${colors.yellow(\"deprecated\")}${\n        scope ? ` in ${scope}` : \"\"\n      }, please use \"${colors.magenta(newOption)}\" instead.${\n        msg ? `\\n${msg}` : \"\"\n      }`\n    );\n\n    if (newOption.includes(\".\")) {\n      const keys = newOption.split(\".\");\n      let temp = options;\n\n      keys.forEach((key, index) => {\n        if (index !== keys.length - 1) {\n          // ensure level exists\n          temp[key] = temp[key] || {};\n\n          temp = temp[key] as Record<string, unknown>;\n        } else {\n          temp[key] = options[deprecatedOption];\n        }\n      });\n    } else {\n      options[newOption] = options[deprecatedOption];\n    }\n\n    delete options[deprecatedOption];\n  }\n};\n","import { deprecatedLogger } from \"./utils.js\";\nimport type { SitemapOptions } from \"../options.js\";\n\n/** @deprecated */\nexport const convertOptions = (\n  options: SitemapOptions & Record<string, unknown>\n): void => {\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"urls\",\n    newOption: \"extraUrls\",\n  });\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"exclude\",\n    newOption: \"excludeUrls\",\n  });\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"outFile\",\n    newOption: \"sitemapFilename\",\n  });\n  deprecatedLogger({\n    options,\n    deprecatedOption: \"dateFormatter\",\n    newOption: \"modifyTimeGetter\",\n  });\n};\n","import type { App, Page } from \"@vuepress/core\";\nimport type { GitData } from \"@vuepress/plugin-git\";\nimport { colors, fs } from \"@vuepress/utils\";\nimport { SitemapStream } from \"sitemap\";\nimport {\n  isLinkHttp,\n  removeEndingSlash,\n  removeLeadingSlash,\n} from \"vuepress-shared/node\";\n\nimport type { ModifyTimeGetter, SitemapOptions } from \"./options.js\";\nimport type {\n  SitemapImageOption,\n  SitemapLinkOption,\n  SitemapNewsOption,\n  SitemapPluginFrontmatter,\n  SitemapVideoOption,\n} from \"./typings/index.js\";\nimport { TEMPLATE_FOLDER, logger } from \"./utils.js\";\n\ninterface SitemapPageInfo {\n  lastmod?: string;\n  changefreq?: string;\n  priority?: number;\n  img?: SitemapImageOption[];\n  video?: SitemapVideoOption[];\n  links?: SitemapLinkOption[];\n  news?: SitemapNewsOption[];\n}\n\nconst reportedLocales: string[] = [];\n\nconst stripLocalePrefix = ({\n  path,\n  pathLocale,\n}: Page): {\n  /** path of root locale */\n  defaultPath: string;\n  /** Locale path prefix of the page */\n  pathLocale: string;\n} => ({\n  defaultPath: path.replace(pathLocale, \"/\"),\n  pathLocale: pathLocale,\n});\n\nconst generatePageMap = (\n  app: App,\n  options: SitemapOptions\n): Map<string, SitemapPageInfo> => {\n  const {\n    changefreq = \"daily\",\n    excludeUrls = [\"/404.html\"],\n    modifyTimeGetter = <ModifyTimeGetter>(\n      ((page: Page<{ git: GitData }>): string =>\n        page.data.git?.updatedTime\n          ? new Date(page.data.git.updatedTime).toISOString()\n          : \"\")\n    ),\n  } = options;\n\n  const {\n    options: { base, locales },\n    pages,\n  } = app;\n\n  const pageLocalesMap = pages.reduce(\n    (map, page) => {\n      const { defaultPath, pathLocale } = stripLocalePrefix(page);\n      const pathLocales = map.get(defaultPath) || [];\n\n      pathLocales.push(pathLocale);\n\n      return map.set(defaultPath, pathLocales);\n    },\n    // a map with keys of defaultPath and string[] value with pathLocales\n    new Map<string, string[]>()\n  );\n\n  const pagesMap = new Map<string, SitemapPageInfo>();\n\n  pages.forEach(\n    (page: Page<Record<never, never>, SitemapPluginFrontmatter>) => {\n      const frontmatterOptions = page.frontmatter.sitemap;\n\n      if (frontmatterOptions === false) return;\n\n      const metaRobotTags = (page.frontmatter.head || []).find(\n        (head) => head[1][\"name\"] === \"robots\"\n      );\n\n      if (\n        // meta tags do not allow index\n        (<string>metaRobotTags?.[1][\"content\"] || \"\")\n          .split(/,/u)\n          .map((content) => content.trim())\n          .includes(\"noindex\") ||\n        // exclude in plugin options\n        excludeUrls.includes(page.path)\n      )\n        return;\n\n      const lastModifyTime = modifyTimeGetter(page);\n      const { defaultPath } = stripLocalePrefix(page);\n      const relatedLocales = pageLocalesMap.get(defaultPath) || [];\n\n      let links: SitemapLinkOption[] = [];\n\n      if (relatedLocales.length > 1) {\n        // warnings for missing `locale[path].lang` in debug mode\n        if (app.env.isDebug)\n          relatedLocales.forEach((localePrefix) => {\n            if (\n              !locales[localePrefix].lang &&\n              !reportedLocales.includes(localePrefix)\n            ) {\n              logger.warn(`\"lang\" option for ${localePrefix} is missing`);\n              reportedLocales.push(localePrefix);\n            }\n          });\n\n        links = relatedLocales.map((localePrefix) => ({\n          lang: locales[localePrefix]?.lang || \"en\",\n          url: `${base}${removeLeadingSlash(\n            defaultPath.replace(/^\\//u, localePrefix)\n          )}`,\n        }));\n      }\n\n      const sitemapInfo: SitemapPageInfo = {\n        ...(changefreq ? { changefreq } : {}),\n        links,\n        ...(lastModifyTime ? { lastmod: lastModifyTime } : {}),\n        ...frontmatterOptions,\n      };\n\n      // log sitemap info in debug mode\n      if (app.env.isDebug)\n        logger.info(\n          `sitemap option for ${page.path}: ${JSON.stringify(\n            sitemapInfo,\n            null,\n            2\n          )}`\n        );\n\n      pagesMap.set(page.path, sitemapInfo);\n    }\n  );\n\n  return pagesMap;\n};\n\nexport const generateSiteMap = async (\n  app: App,\n  options: SitemapOptions\n): Promise<void> => {\n  const { extraUrls = [], xmlNameSpace: xmlns } = options;\n  const hostname = isLinkHttp(options.hostname)\n    ? removeEndingSlash(options.hostname)\n    : `https://${removeEndingSlash(options.hostname)}`;\n  const sitemapFilename = options.sitemapFilename\n    ? removeLeadingSlash(options.sitemapFilename)\n    : \"sitemap.xml\";\n  const sitemapXSLFilename = options.sitemapXSLFilename\n    ? removeLeadingSlash(options.sitemapXSLFilename)\n    : \"sitemap.xsl\";\n  const sitemapXSLTemplate =\n    options.sitemapXSLTemplate ?? `${TEMPLATE_FOLDER}sitemap.xsl`;\n\n  const {\n    dir,\n    options: { base },\n  } = app;\n\n  logger.load(`Generating sitemap to ${colors.cyan(`/${sitemapFilename}`)}`);\n\n  await new Promise<void>((resolve) => {\n    const sitemap = new SitemapStream({\n      hostname,\n      ...(xmlns ? { xmlns } : {}),\n    });\n    const pagesMap = generatePageMap(app, options);\n    const sitemapXMLPath = dir.dest(sitemapFilename);\n    const sitemapXSLPath = dir.dest(sitemapXSLFilename);\n    const writeStream = fs.createWriteStream(sitemapXMLPath);\n\n    sitemap.pipe(writeStream);\n\n    pagesMap.forEach((page, path) =>\n      sitemap.write({\n        url: `${base}${removeLeadingSlash(path)}`,\n        ...page,\n      })\n    );\n\n    writeStream.on(\"finish\", () => {\n      const content = fs.readFileSync(sitemapXMLPath, {\n        encoding: \"utf-8\",\n      });\n\n      fs.writeFileSync(\n        sitemapXMLPath,\n        content.replace(\n          '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n          `\\\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"${base}${sitemapXSLFilename}\"?>\n`\n        )\n      );\n\n      fs.copySync(sitemapXSLTemplate, sitemapXSLPath);\n\n      resolve();\n    });\n\n    extraUrls.forEach((item) =>\n      sitemap.write({ url: `${base}${removeLeadingSlash(item)}` })\n    );\n    sitemap.end();\n  });\n\n  logger.succeed();\n\n  const robotTxtPath = dir.dest(\"robots.txt\");\n\n  if (fs.existsSync(robotTxtPath)) {\n    logger.load(`Appended sitemap path to ${colors.cyan(\"robots.txt\")}`);\n\n    const robotsTxt = await fs.readFile(robotTxtPath, { encoding: \"utf8\" });\n\n    const newRobotsTxtContent = `${robotsTxt.replace(\n      /^Sitemap: .*$/u,\n      \"\"\n    )}\\nSitemap: ${hostname}${base}${sitemapFilename}\\n`;\n\n    await fs.writeFile(robotTxtPath, newRobotsTxtContent, { flag: \"w\" });\n\n    logger.succeed();\n  }\n};\n","import type { PluginFunction, PluginObject } from \"@vuepress/core\";\nimport { colors } from \"@vuepress/utils\";\nimport { checkVersion } from \"vuepress-shared/node\";\n\nimport { convertOptions } from \"./compact/index.js\";\nimport { generateSiteMap } from \"./generateSitemap.js\";\nimport type { SitemapOptions } from \"./options.js\";\nimport { PLUGIN_NAME, logger } from \"./utils.js\";\n\nexport const sitemapPlugin =\n  (options: SitemapOptions, legacy = true): PluginFunction =>\n  (app) => {\n    // TODO: Remove this in v2 stable\n    if (legacy)\n      convertOptions(options as SitemapOptions & Record<string, unknown>);\n    checkVersion(app, PLUGIN_NAME, \"2.0.0-beta.63\");\n\n    if (app.env.isDebug) logger.info(\"Options:\", options);\n\n    const plugin: PluginObject = {\n      name: PLUGIN_NAME,\n    };\n\n    if (!options.hostname) {\n      logger.error(`Option ${colors.magenta(\"hostname\")} is required!`);\n\n      return plugin;\n    }\n\n    return {\n      ...plugin,\n\n      onGenerated: (app): Promise<void> => generateSiteMap(app, options),\n    };\n  };\n"],"names":["__dirname","getDirname","TEMPLATE_FOLDER","ensureEndingSlash","path","PLUGIN_NAME","logger","Logger","deprecatedLogger","options","deprecatedOption","newOption","msg","scope","colors","keys","temp","key","index","convertOptions","reportedLocales","stripLocalePrefix","pathLocale","generatePageMap","app","changefreq","excludeUrls","modifyTimeGetter","page","_a","base","locales","pages","pageLocalesMap","map","defaultPath","pathLocales","pagesMap","frontmatterOptions","metaRobotTags","head","content","lastModifyTime","relatedLocales","links","localePrefix","removeLeadingSlash","sitemapInfo","generateSiteMap","extraUrls","xmlns","hostname","isLinkHttp","removeEndingSlash","sitemapFilename","sitemapXSLFilename","sitemapXSLTemplate","dir","resolve","sitemap","SitemapStream","sitemapXMLPath","sitemapXSLPath","writeStream","fs","item","robotTxtPath","newRobotsTxtContent","sitemapPlugin","legacy","checkVersion","plugin"],"mappings":"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"}