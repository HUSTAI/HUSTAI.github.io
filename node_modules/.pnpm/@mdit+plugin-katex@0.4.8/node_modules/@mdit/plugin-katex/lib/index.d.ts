import { KatexOptions } from 'katex';
import MarkdownIt from 'markdown-it';

interface KatexCatcodes {
    [key: string]: number;
}
interface KatexLexerInterFace {
    input: string;
    tokenRegex: RegExp;
    settings: Required<KatexOptions>;
    catcodes: KatexCatcodes;
}
interface KatexSourceLocation {
    start: number;
    end: number;
    lexer: KatexLexerInterFace;
}
interface KatexToken {
    text: string;
    loc: KatexSourceLocation;
    noexpand: boolean | undefined;
    treatAsRelax: boolean | undefined;
}
type KatexLogger<MarkdownItEnv = unknown> = (errorCode: "unknownSymbol" | "unicodeTextInMathMode" | "mathVsTextUnits" | "commentAtEnd" | "htmlExtension" | "newLineInDisplayMode", errorMsg: string, token: KatexToken, env: MarkdownItEnv) => "error" | "warn" | "ignore" | void;
interface MarkdownItKatexOptions<MarkdownItEnv = unknown> extends KatexOptions {
    /**
     * Whether parsed fence block with math language to display mode math
     *
     * 是否将解析的数学语言 fence 块转换为显示模式数学
     *
     * @default false
     */
    mathFence?: boolean;
    /**
     * Whether enable mhchem extension
     *
     * 是否启用 mhchem 扩展
     *
     * @default false
     */
    mhchem?: boolean;
    /**
     * Error logger
     *
     * 错误日志记录器
     */
    logger?: KatexLogger<MarkdownItEnv>;
}

declare const katex: <MarkdownItEnv = unknown>(md: MarkdownIt, options?: MarkdownItKatexOptions<MarkdownItEnv>) => void;

export { KatexLogger, KatexToken, MarkdownItKatexOptions, katex };
