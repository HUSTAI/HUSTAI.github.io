const h=(e,c,a=[])=>{for(let t=1,l=e.length;t<l-1;t++){const i=e[t],{content:r,type:g}=i;if(g!=="text"||a.includes(r))continue;const s=c.find(({matcher:n})=>typeof n=="string"?n===r:n.test(r)),o=e[t-1],f=e[t+1];if(s&&o.tag===f.tag&&o.nesting===1&&f.nesting===-1){const n=s.replacer({tag:o.tag,content:i.content,attrs:Object.fromEntries(o.attrs||[])});n&&(o.tag=f.tag=n.tag,o.attrs=Object.entries(n.attrs),i.content=n.content),t+=2}}},p=(e,c={})=>{var a;((a=c.config)==null?void 0:a.length)!=0&&e.core.ruler.push("stylize_tag",({env:t,tokens:l})=>{var i;const r=((i=c.localConfigGetter)==null?void 0:i.call(c,t))??[];l.forEach(({type:g,children:s})=>{g==="inline"&&s&&h(s,[...r,...c.config??[]])})})};export{p as stylize};
//# sourceMappingURL=index.mjs.map
