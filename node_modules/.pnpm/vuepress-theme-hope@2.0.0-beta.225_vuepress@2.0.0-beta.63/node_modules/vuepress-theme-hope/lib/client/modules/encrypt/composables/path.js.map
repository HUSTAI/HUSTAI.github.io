{"version":3,"file":"path.js","sourceRoot":"","sources":["../../../../../src/client/modules/encrypt/composables/path.ts"],"names":[],"mappings":"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","sourcesContent":["import { usePageData } from \"@vuepress/client\";\nimport { isPlainObject } from \"@vuepress/shared\";\nimport { useSessionStorage, useStorage } from \"@vueuse/core\";\nimport type { ComputedRef } from \"vue\";\nimport { computed } from \"vue\";\nimport { keys, startsWith } from \"vuepress-shared/client\";\n\nimport { checkToken } from \"@theme-hope/modules/encrypt/utils/index\";\n\nimport { useEncryptData } from \"./utils.js\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_PATH_TOKEN\";\n\nexport interface EncryptStatus {\n  isEncrypted: boolean;\n  isDecrypted: boolean;\n}\n\nexport interface PathEncrypt {\n  status: ComputedRef<EncryptStatus>;\n  getStatus: (path: string) => EncryptStatus;\n  validate: (token: string, keep?: boolean) => void;\n}\n\nexport const usePathEncrypt = (): PathEncrypt => {\n  const page = usePageData();\n  const encryptData = useEncryptData();\n\n  const localToken = useStorage<Record<string, string>>(STORAGE_KEY, {});\n  const sessionToken = useSessionStorage<Record<string, string>>(\n    STORAGE_KEY,\n    {}\n  );\n\n  const getPathMatchedKeys = (path: string): string[] =>\n    isPlainObject(encryptData.value.config)\n      ? keys(encryptData.value.config)\n          .filter((key) => startsWith(decodeURI(path), key))\n          .sort((a, b) => b.length - a.length)\n      : [];\n\n  const getStatus = (path: string): EncryptStatus => {\n    const matchedKeys = getPathMatchedKeys(path);\n\n    if (matchedKeys.length > 0) {\n      const { config = {} } = encryptData.value;\n\n      return {\n        isEncrypted: true,\n        isDecrypted: matchedKeys.some(\n          (key) =>\n            (localToken.value[key] &&\n              config[key].some((token) =>\n                checkToken(localToken.value[key], token)\n              )) ||\n            (sessionToken.value[key] &&\n              config[key].some((token) =>\n                checkToken(sessionToken.value[key], token)\n              ))\n        ),\n      };\n    }\n\n    return {\n      isDecrypted: false,\n      isEncrypted: false,\n    };\n  };\n\n  const status = computed(() => getStatus(page.value.path));\n\n  const validate = (inputToken: string, keep = false): void => {\n    const { config = {} } = encryptData.value;\n    const matchedKeys = getPathMatchedKeys(page.value.path);\n\n    // some of the tokens matches\n    for (const hitKey of matchedKeys)\n      if (config[hitKey].filter((token) => checkToken(inputToken, token))) {\n        (keep ? localToken : sessionToken).value[hitKey] = inputToken;\n\n        break;\n      }\n  };\n\n  return {\n    status,\n    getStatus,\n    validate,\n  };\n};\n"]}