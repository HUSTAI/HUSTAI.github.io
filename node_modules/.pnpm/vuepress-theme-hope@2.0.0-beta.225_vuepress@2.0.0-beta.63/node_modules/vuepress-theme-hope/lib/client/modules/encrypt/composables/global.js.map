{"version":3,"file":"global.js","sourceRoot":"","sources":["../../../../../src/client/modules/encrypt/composables/global.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC7D,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAE/B,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C,MAAM,WAAW,GAAG,4BAA4B,CAAC;AAQjD,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAkB,EAAE;IAClD,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IAErC,MAAM,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC/C,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAExD,wBAAwB;IACxB,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,EAAE;QAChC,MAAM,EAAE,MAAM,GAAG,KAAK,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC;QAEzD,OAAO,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,qBAAqB;IACrB,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,EAAE;QAChC,IAAI,WAAW,CAAC,KAAK,EAAE;YACrB,IAAI,UAAU,CAAC,KAAK;gBAClB,4BAA4B;gBAC5B,OAAO,WAAW,CAAC,KAAK,CAAC,KAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAC5C,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CACpC,CAAC;YAEJ,IAAI,YAAY,CAAC,KAAK;gBACpB,4BAA4B;gBAC5B,OAAO,WAAW,CAAC,KAAK,CAAC,KAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAC5C,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CACtC,CAAC;SACL;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,CAAC,UAAkB,EAAE,IAAI,GAAG,KAAK,EAAQ,EAAE;QAC1D,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;IACxD,CAAC,CAAC;IAEF,OAAO;QACL,WAAW;QACX,WAAW;QACX,QAAQ;KACT,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useSessionStorage, useStorage } from \"@vueuse/core\";\nimport { compareSync } from \"bcrypt-ts/browser\";\nimport type { ComputedRef } from \"vue\";\nimport { computed } from \"vue\";\n\nimport { useEncryptData } from \"./utils.js\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_GLOBAL_TOKEN\";\n\nexport interface GlobalEncrypt {\n  isEncrypted: ComputedRef<boolean>;\n  isDecrypted: ComputedRef<boolean>;\n  validate: (token: string, keep?: boolean) => void;\n}\n\nexport const useGlobalEncrypt = (): GlobalEncrypt => {\n  const encryptData = useEncryptData();\n\n  const localToken = useStorage(STORAGE_KEY, \"\");\n  const sessionToken = useSessionStorage(STORAGE_KEY, \"\");\n\n  // is globally encrypted\n  const isEncrypted = computed(() => {\n    const { global = false, admin = [] } = encryptData.value;\n\n    return global && admin.length > 0;\n  });\n\n  // valid token exists\n  const isDecrypted = computed(() => {\n    if (isEncrypted.value) {\n      if (localToken.value)\n        // none of the token matches\n        return encryptData.value.admin!.some((hash) =>\n          compareSync(localToken.value, hash)\n        );\n\n      if (sessionToken.value)\n        // none of the token matches\n        return encryptData.value.admin!.some((hash) =>\n          compareSync(sessionToken.value, hash)\n        );\n    }\n\n    return false;\n  });\n\n  const validate = (inputToken: string, keep = false): void => {\n    (keep ? localToken : sessionToken).value = inputToken;\n  };\n\n  return {\n    isEncrypted,\n    isDecrypted,\n    validate,\n  };\n};\n"]}