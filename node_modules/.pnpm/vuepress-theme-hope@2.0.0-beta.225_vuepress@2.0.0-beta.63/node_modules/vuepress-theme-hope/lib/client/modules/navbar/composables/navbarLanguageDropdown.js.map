{"version":3,"file":"navbarLanguageDropdown.js","sourceRoot":"","sources":["../../../../../src/client/modules/navbar/composables/navbarLanguageDropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import { useRouteLocale, useSiteLocaleData } from \"@vuepress/client\";\nimport type { ComputedRef } from \"vue\";\nimport { computed } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\";\nimport { entries, keys } from \"vuepress-shared/client\";\n\nimport {\n  useThemeData,\n  useThemeLocaleData,\n} from \"@theme-hope/composables/index\";\n\nimport type { AutoLinkOptions, NavGroup } from \"../../../../shared/index.js\";\n\n/**\n * Get navbar config of select language dropdown\n */\nexport const useNavbarLanguageDropdown =\n  (): ComputedRef<NavGroup<AutoLinkOptions> | null> => {\n    const router = useRouter();\n    const route = useRoute();\n    const routeLocale = useRouteLocale();\n    const siteLocale = useSiteLocaleData();\n    const themeData = useThemeData();\n    const themeLocale = useThemeLocaleData();\n\n    return computed(() => {\n      const localePaths = keys(siteLocale.value.locales);\n      const extraLocales = entries(themeData.value.extraLocales ?? {});\n\n      // do not display language selection dropdown if there is only one language\n      if (localePaths.length < 2 && !extraLocales.length) return null;\n\n      const { path, fullPath } = router.currentRoute.value;\n      const { navbarLocales } = themeLocale.value;\n\n      const languageDropdown: NavGroup<AutoLinkOptions> = {\n        text: \"\",\n        ariaLabel: navbarLocales?.selectLangAriaLabel,\n        children: [\n          ...localePaths.map((targetLocalePath) => {\n            // target locale config of this language link\n            const targetSiteLocale =\n              siteLocale.value.locales?.[targetLocalePath] ?? {};\n            const targetThemeLocale =\n              themeData.value.locales?.[targetLocalePath] ?? {};\n            const targetLang = targetSiteLocale.lang || \"\";\n\n            const text =\n              targetThemeLocale.navbarLocales?.langName ?? targetLang;\n            let link;\n\n            // if the target language is current language\n            if (targetLang === siteLocale.value.lang) {\n              // stay at current link\n              link = path;\n            }\n            // if the target language is not current language\n            else {\n              const targetLocalePage = path.replace(\n                routeLocale.value,\n                targetLocalePath\n              );\n\n              link =\n                // try to link to the corresponding page of current page\n                router\n                  .getRoutes()\n                  .some((item) => item.path === targetLocalePage)\n                  ? // try to keep current hash across languages\n                    fullPath.replace(path, targetLocalePage)\n                  : // or fallback to homepage\n                    targetThemeLocale.home ?? targetLocalePath;\n            }\n\n            return {\n              text,\n              link,\n            };\n          }),\n          ...extraLocales.map(([text, path]) => ({\n            text,\n            link: path.replace(\n              \":route\",\n              route.path.replace(routeLocale.value, \"\")\n            ),\n          })),\n        ],\n      };\n\n      return languageDropdown;\n    });\n  };\n"]}