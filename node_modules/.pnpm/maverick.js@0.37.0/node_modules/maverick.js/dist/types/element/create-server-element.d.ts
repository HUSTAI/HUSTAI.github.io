import { noop } from '../std/unit';
import type { AnyComponent, Component, ComponentConstructor } from './component';
import type { HostElement } from './host';
import type { ComponentLifecycleCallback } from './instance';
export declare function createServerElement<T extends Component = AnyComponent>(Component: ComponentConstructor<T>): typeof ServerCustomElement<T>;
export interface ServerHTMLElement extends Pick<HTMLElement, 'getAttribute' | 'setAttribute' | 'hasAttribute' | 'removeAttribute' | 'dispatchEvent' | 'addEventListener' | 'removeEventListener'> {
    readonly classList: Pick<HTMLElement['classList'], 'length' | 'add' | 'contains' | 'remove' | 'replace' | 'toggle' | 'toString'>;
    readonly style: Pick<HTMLElement['style'], 'length' | 'getPropertyValue' | 'removeProperty' | 'setProperty'> & {
        toString(): string;
    };
}
declare class ServerCustomElement<Component extends AnyComponent = AnyComponent> implements ServerHTMLElement, HostElement<Component> {
    keepAlive: boolean;
    static _component: ComponentConstructor;
    private _component;
    private _ssr?;
    private _rendered;
    private _attachCallbacks;
    readonly attributes: Attributes;
    readonly style: Style;
    readonly classList: ClassList;
    get component(): Component | null;
    get $store(): any;
    get state(): {};
    attachComponent(component: Component): void;
    render(): string;
    renderInnerHTML(): string;
    getShadowRootMode(): ShadowRootMode;
    getAttribute(name: string): string | null;
    setAttribute(name: string, value: string): void;
    hasAttribute(name: string): boolean;
    removeAttribute(name: string): void;
    dispatchEvent(): boolean;
    onEventDispatch(): void;
    addEventListener(): void;
    removeEventListener(): void;
    subscribe(): typeof noop;
    onAttach(callback: ComponentLifecycleCallback): typeof noop;
    destroy(): void;
}
declare class Attributes {
    protected _tokens: Map<string, string>;
    get length(): number;
    get tokens(): Map<string, string>;
    getAttribute(name: string): string | null;
    hasAttribute(name: string): boolean;
    setAttribute(name: string, value: string): void;
    removeAttribute(name: string): void;
    toString(): string;
}
declare class Style {
    protected _tokens: Map<string, string>;
    get length(): number;
    get tokens(): Map<string, string>;
    getPropertyValue(prop: string): string;
    setProperty(prop: string, value: string | null): void;
    removeProperty(prop: string): string;
    toString(): string;
}
declare class ClassList {
    protected _tokens: Set<string>;
    get length(): number;
    get tokens(): Set<string>;
    add(...tokens: string[]): void;
    contains(token: string): boolean;
    remove(token: string): void;
    replace(token: string, newToken: string): boolean;
    toggle(token: string, force?: boolean): boolean;
    toString(): string;
}
export {};
