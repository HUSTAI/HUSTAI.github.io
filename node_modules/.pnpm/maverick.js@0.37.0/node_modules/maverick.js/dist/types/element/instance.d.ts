import { type Scope } from '@maverick-js/signals';
import { type WriteSignalRecord } from '../runtime';
import { type JSX } from '../runtime/jsx';
import type { AnyComponentAPI, Component, ComponentAPI, ComponentConstructor, InferComponentAPI, InferComponentProps } from './component';
import type { ElementAttributesRecord, ElementStylesRecord } from './controller';
export interface ComponentLifecycleCallback {
    (el: HTMLElement): any;
}
export interface ComponentInstanceInit<Props = {}> {
    scope?: Scope | null;
    props?: Readonly<Partial<Props>> | null;
}
export declare function createComponent<T extends Component>(Component: ComponentConstructor<T>, init?: ComponentInstanceInit<InferComponentProps<T>>): Component<InferComponentAPI<T>>;
export declare class ComponentInstance<API extends ComponentAPI = AnyComponentAPI> {
    private _dispose;
    _scope: Scope;
    _el: HTMLElement | null;
    _renderer: (() => JSX.Element) | null;
    _innerHTML: boolean;
    _destroyed: boolean;
    _attrs: ElementAttributesRecord | null;
    _styles: ElementStylesRecord | null;
    _props: WriteSignalRecord<API['props']>;
    _state: any;
    _store: any;
    _attachCallbacks: ComponentLifecycleCallback[];
    _connectCallbacks: ComponentLifecycleCallback[];
    _disconnectCallbacks: ComponentLifecycleCallback[];
    _destroyCallbacks: ComponentLifecycleCallback[];
    constructor(Component: ComponentConstructor, init?: ComponentInstanceInit<InferComponentProps<API>>);
    _destroy(): void;
}
