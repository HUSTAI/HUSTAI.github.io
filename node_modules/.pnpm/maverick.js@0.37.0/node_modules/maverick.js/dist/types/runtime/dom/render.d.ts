import type { JSX } from '../jsx';
import { type Dispose } from '../reactivity';
import { type MarkerWalker } from './walker';
export declare let hydration: HydrationContext | null;
export type HydrationContext = {
    w: MarkerWalker;
};
export { type MarkerWalker };
export interface HydrateOptions extends RenderOptions {
}
export interface Hydrator {
    (root: () => JSX.Element, options: HydrateOptions): Dispose;
}
export declare function hydrate(root: () => JSX.Element, options: HydrateOptions): Dispose;
export declare function runHydration<T>(run: () => T, options: HydrateOptions): T;
export interface RenderOptions {
    target: Node;
    before?: Node;
}
export interface Renderer {
    (root: () => JSX.Element, options: RenderOptions): Dispose;
}
export declare function render(root: () => JSX.Element, options: RenderOptions): Dispose;
