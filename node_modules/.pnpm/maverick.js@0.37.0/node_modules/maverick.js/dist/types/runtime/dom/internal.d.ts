import { type HTMLCustomElement } from '../../element';
import { createFragment, setAttribute, setStyle, toggleClass } from '../../std/dom';
import type { JSX } from '../jsx';
import { computed, peek, scoped } from '../reactivity';
import { insert } from './insert';
import { insertLite } from './insert-lite';
/** @internal */
export declare function $$_create_template(html: string): DocumentFragment;
/** @internal */
export declare const $$_create_fragment: typeof createFragment;
/** @internal */
export declare function $$_create_walker(fragment: DocumentFragment, walker?: TreeWalker | undefined): [root: Node, walker: TreeWalker];
/** @internal */
export declare function $$_next_template(fragment: DocumentFragment): Node;
/** @internal */
export declare function $$_next_element(walker: TreeWalker): Element;
/** @internal */
export declare const $$_hydrating: import("./render").HydrationContext | null;
/** @internal */
export declare function $$_setup_custom_element(host: HTMLCustomElement, props: Record<string, any> | null): import("@maverick-js/signals/dist/types/types").Scope;
/** @internal */
export declare function $$_clone(fragment: DocumentFragment): Element;
/** @internal */
export declare function $$_create_element(tagName: string): HTMLElement;
/** @internal */
export declare function $$_attach_declarative_shadow_dom(element: HTMLCustomElement): void;
/** @internal */
export declare const $$_insert: typeof insert;
/** @internal */
export declare function $$_insert_at_marker(marker: Comment, value: JSX.Element): void;
/** @internal */
export declare const $$_insert_lite: typeof insertLite;
/** @internal */
export declare function $$_insert_at_marker_lite(marker: Comment, value: JSX.Element): void;
/** @internal */
export declare function $$_create_component<T = any>(component: (props: T) => Node | null | undefined, props?: T): Node | null | undefined;
export declare const $$CHILDREN: unique symbol;
/** @internal */
export declare function $$_children(fn: () => JSX.Element): () => JSX.Element;
/** @internal */
export declare function $$_ref(element: Element, ref: JSX.Ref | JSX.RefArray): void;
/** @internal */
export declare function $$_directive(element: Element, directive: JSX.Directive, args: unknown[]): void;
/** @internal */
export declare const $$_attr: typeof setAttribute;
/** @internal */
export declare const $$_class: typeof toggleClass;
/** @internal */
export declare const $$_style: typeof setStyle;
/** @internal */
export declare function $$_spread(element: Element, props: Record<string, unknown>): void;
/** @internal */
export declare function $$_merge_props(...sources: Record<string, any>[]): Record<string, any>;
/** @internal */
export declare function $$_listen(target: EventTarget, type: string, handler: unknown, capture?: boolean): void;
export declare function $$_delegate_events(types: (keyof GlobalEventHandlersEventMap)[], document?: Document): void;
export declare const $$_peek: typeof peek;
export declare const $$_scoped: typeof scoped;
export declare const $$_effect: typeof import("@maverick-js/signals").effect;
export declare const $$_computed: typeof computed;
