import type { Constructor } from 'type-fest';
import type { InferComponentEvents } from '../element/component';
import type { HostElement } from '../element/host';
import { type Dispose, type JSX } from '../runtime';
declare const EVENT: Constructor<Event>, DOM_EVENT: unique symbol;
export interface DOMEventInit<Detail = unknown> extends EventInit {
    readonly detail: Detail;
    readonly trigger?: Event;
}
export declare class DOMEvent<Detail = unknown> extends EVENT {
    [DOM_EVENT]: boolean;
    /**
     * The event detail.
     */
    readonly detail: Detail;
    /**
     * The preceding event that was responsible for this event being fired.
     */
    readonly trigger?: Event;
    /**
     * Walks up the event chain (following each `trigger`) and returns the origin event
     * that started the chain.
     */
    get originEvent(): Event;
    /**
     * Walks up the event chain (following each `trigger`) and determines whether the initial
     * event was triggered by the end user (ie: check whether `isTrusted` on the `originEvent` `true`).
     */
    get isOriginTrusted(): boolean;
    constructor(type: string, ...init: Detail extends void | undefined | never ? [init?: Partial<DOMEventInit<Detail>>] : [init: DOMEventInit<Detail>]);
}
/**
 * Whether the given `event` is a Maverick DOM Event class.
 */
export declare function isDOMEvent(event?: Event | null): event is DOMEvent<unknown>;
/**
 * Walks up the event chain (following each `trigger`) and returns the origin event that
 * started the chain.
 */
export declare function getOriginEvent(event: DOMEvent): Event | undefined;
/**
 * Walks an event chain on a given `event`, and invokes the given `callback` for each trigger event.
 *
 * @param event - The event on which to follow the chain.
 * @param callback - Invoked for each trigger event in the chain. If a `value` is returned by
 * this callback, the walk will end and `[event, value]` will be returned.
 */
export declare function walkTriggerEventChain<T>(event: Event, callback: (event: Event) => NonNullable<T> | void): [event: Event, value: NonNullable<T>] | undefined;
/**
 * Attempts to find a trigger event with a given `eventType` on the event chain.
 *
 * @param event - The event on which to look for a trigger event.
 * @param type - The type of event to find.
 */
export declare function findTriggerEvent(event: Event, type: string): Event | undefined;
/**
 * Whether a trigger event with the given `eventType` exists can be found in the event chain.
 *
 * @param event - The event on which to look for a trigger event.
 * @param type - The type of event to find.
 */
export declare function hasTriggerEvent(event: Event, type: string): boolean;
/**
 * Appends the given `trigger` to the event chain. This means the new origin event will be
 * the origin of the given `trigger`, or the `trigger` itself (if no chain exists on the
 * trigger).
 *
 * @param event - The event on which to extend the trigger event chain.
 * @param trigger - The trigger event that will becoming the new origin event.
 */
export declare function appendTriggerEvent(event: DOMEvent, trigger?: Event): void;
export type InferEventDetail<T> = T extends DOMEventInit<infer Detail> ? Detail : T extends DOMEvent<infer Detail> ? Detail : unknown;
export type InferEventInit<T> = T extends Constructor<DOMEvent> ? DOMEventInit<InferEventDetail<InstanceType<T>>> : T extends DOMEvent ? DOMEventInit<InferEventDetail<T>> : T extends DOMEventInit ? T : DOMEventInit<unknown>;
export type EventCallback<T extends Event> = ((event: T) => void) | {
    handleEvent(event: T): void;
} | null;
export declare class EventsTarget<Events> extends EventTarget {
    /** @internal type only */
    ts__events?: Events;
    addEventListener<Type extends keyof Events>(type: Type & string, callback: EventCallback<Events[Type] & Event>, options?: boolean | AddEventListenerOptions | undefined): void;
    removeEventListener<Type extends keyof Events>(type: Type & string, callback: EventCallback<Events[Type] & Event>, options?: boolean | AddEventListenerOptions | undefined): void;
}
/**
 * Adds an event listener for the given `type` and returns a function which can be invoked to
 * remove the event listener.
 *
 * - The listener is removed if the current scope is disposed.
 * - This function is safe to use on the server (noop).
 */
export declare function listenEvent<Target extends EventTarget, Events = Target extends HostElement<infer API> ? InferComponentEvents<API> & MaverickOnAttributes : Target extends EventsTarget<infer Events> ? Events extends {} ? Events : MaverickOnAttributes : Target extends {
    ts__events?: infer Events;
} ? Events extends {} ? Events : MaverickOnAttributes : MaverickOnAttributes, Type extends keyof Events = keyof Events>(target: Target, type: Type & string, handler: JSX.TargetedEventHandler<Target, Events[Type] extends Event ? Events[Type] : Event>, options?: AddEventListenerOptions | boolean): Dispose;
export declare function isPointerEvent(event: Event | undefined): event is PointerEvent;
export declare function isTouchEvent(event: Event | undefined): event is TouchEvent;
export declare function isMouseEvent(event: Event | undefined): event is MouseEvent;
export declare function isKeyboardEvent(event: Event | undefined): event is KeyboardEvent;
export declare function wasEnterKeyPressed(event: Event | undefined): boolean;
export declare function wasEscapeKeyPressed(event: Event | undefined): boolean;
export declare function isKeyboardClick(event: Event | undefined): boolean;
export {};
