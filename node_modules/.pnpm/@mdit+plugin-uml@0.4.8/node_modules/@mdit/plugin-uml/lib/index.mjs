const S=(p,{name:f,open:h,close:d,render:m}={name:"uml",open:"start",close:"end",render:(o,i)=>{const l=o[i],{content:e,info:c,type:u}=l;return`<div class="${u}" title="${c}">${e}</div>`}})=>{const o=`@${h}`,i=`@${d}`,l=(e,c,u,$)=>{let n,k=!1,t=e.bMarks[c]+e.tShift[c],a=e.eMarks[c];if(e.src.charAt(t)!=="@")return!1;for(n=0;n<o.length;++n)if(o[n]!==e.src[t+n])return!1;const g=e.src.slice(t,t+n),M=e.src.slice(t+n,a);if($)return!0;let s=c;for(;s<u&&(t=e.bMarks[s]+e.tShift[s],a=e.eMarks[s],!(t<a&&e.sCount[s]<e.blkIndent));){if(e.src.charAt(t)==="@"&&e.sCount[s]<=e.sCount[c]){let b=!0;for(n=0;n<i.length;++n)if(i[n]!==e.src[t+n]){b=!1;break}if(b&&e.skipSpaces(t+n)>=a){k=!0;break}}s+=1}const C=e.src.split(`
`).slice(c+1,s).join(`
`),r=e.push(f,"fence",0);return r.block=!0,r.info=M,r.content=C,r.map=[c,s],r.markup=g,e.line=s+(k?1:0),!0};p.block.ruler.before("fence",f,l,{alt:["paragraph","reference","blockquote","list"]}),p.renderer.rules[f]=m};export{S as uml};
//# sourceMappingURL=index.mjs.map
