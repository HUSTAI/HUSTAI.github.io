import { ComponentController, ComponentInstance } from 'maverick.js/element';
import { DOMEvent } from 'maverick.js/std';
import type { MediaContext } from '../../../core/api/context';
import type { SliderDragEndEvent, SliderDragStartEvent, SliderDragValueChangeEvent, SliderValueChangeEvent } from './api/events';
import type { SliderAPI } from './slider';
export interface SliderEventDelegate {
    readonly _orientation: string;
    _swipeGesture?: boolean;
    _isDisabled(): boolean;
    _getStep(): number;
    _getKeyStep(): number;
    _roundValue(value: number): number;
    _onValueChange(event: SliderValueChangeEvent): unknown;
    _onDragStart(event: SliderDragStartEvent): unknown;
    _onDragEnd(event: SliderDragEndEvent): unknown;
    _onDragValueChange(event: SliderDragValueChangeEvent): unknown;
}
export declare class SliderEventsController extends ComponentController<SliderAPI> {
    protected _delegate: SliderEventDelegate;
    protected _media: MediaContext;
    constructor(instance: ComponentInstance<SliderAPI>, _delegate: SliderEventDelegate, _media: MediaContext);
    protected onConnect(): void;
    protected _outlet: HTMLElement | null;
    protected _touchX: number | null;
    protected _touchStartValue: number | null;
    protected _onTouchStart(event: TouchEvent): void;
    protected _onTouchMove(event: TouchEvent): void;
    protected _attachEventListeners(): void;
    protected _attachPointerListeners(): void;
    protected _onFocus(): void;
    protected _updateValue(newValue: number, trigger?: Event): void;
    protected _updatePointerValue(value: number, trigger?: Event): void;
    protected _getPointerValue(event: PointerEvent): number;
    protected _onPointerEnter(event: PointerEvent): void;
    protected _onPointerMove(event: PointerEvent): void;
    protected _onPointerLeave(event: PointerEvent): void;
    protected _onPointerDown(event: PointerEvent): void;
    protected _thumb: HTMLElement | null;
    protected _trackFill: HTMLElement | null;
    protected _onStartDragging(value: number, trigger: Event): void;
    protected _onStopDragging(value: number, trigger: Event): void;
    protected _lastDownKey: string;
    protected _onKeyDown(event: DOMEvent<void> | KeyboardEvent): void;
    protected _onKeyUp(event: DOMEvent<void> | KeyboardEvent): void;
    protected _getKeyValue(event: KeyboardEvent): number | undefined;
    protected _onDocumentPointerUp(event: PointerEvent): void;
    protected _onDocumentTouchMove(event: TouchEvent): void;
    protected _onDocumentPointerMove: ((event: PointerEvent) => void) & {
        cancel: () => void;
        flush: () => void;
    };
}
