import { type ReadSignal } from 'maverick.js';
import { VTTCue } from 'media-captions';
import type { MediaStore } from '../../../core/api/store';
import type { SliderStore } from '../slider/api/store';
export declare class SliderChaptersRenderer {
    protected _media: MediaStore;
    protected _slider: SliderStore;
    protected _onChange: (chapter: string) => void;
    protected _chapters: VTTCue[];
    protected _refs: HTMLElement[];
    protected _activeChapterIndex: number;
    protected _bufferedChapterIndex: number;
    constructor(_media: MediaStore, _slider: SliderStore, _onChange: (chapter: string) => void);
    render(cues: ReadonlyArray<VTTCue> | undefined, $class: ReadSignal<string | null>): import("maverick.js").JSX.Element;
    protected _renderChapters(cues: ReadonlyArray<VTTCue>): HTMLElement[];
    protected _renderChapter(): HTMLDivElement;
    protected _getChapterTrackFill(container: HTMLElement): HTMLElement;
    protected _getChapterTrackProgress(container: HTMLElement): HTMLElement;
    protected _getChaptersEndTime(): number;
    protected _updateContainerWidths(): void;
    protected _watchFillPercent(): void;
    protected _watchPointerPercent(): void;
    protected _updateTrackFillWidths(start: number, end: number, width: string): void;
    protected _findActiveChapterIndex(startIndex: number, percent: number): number;
    protected _watchBufferedPercent(): void;
    protected _updateBufferedPercent: (bufferedPercent: number) => void;
    protected _bufferedPercent: ReadSignal<number>;
    protected _calcMediaBufferedPercent(): number;
    protected _calcChapterPercent(cue: VTTCue, percent: number): number;
    protected _fillChapterGaps(cues: ReadonlyArray<VTTCue>): VTTCue[];
}
