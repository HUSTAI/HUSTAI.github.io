import { ComponentInstance, type HTMLCustomElement } from 'maverick.js/element';
import { ClassManager } from '../../../../foundation/observers/class-manager';
import type { TextTrack } from '../../../core/tracks/text/text-track';
import type { SliderCSSVars } from '../slider/api/cssvars';
import type { SliderDragEndEvent, SliderDragStartEvent, SliderDragValueChangeEvent, SliderValueChangeEvent } from '../slider/api/events';
import { type SliderProps } from '../slider/api/props';
import { Slider, type SliderAPI } from '../slider/slider';
import { SliderChaptersRenderer } from './chapters';
declare global {
    interface MaverickElements {
        'media-time-slider': MediaTimeSliderElement;
    }
}
/**
 * A slider control that lets the user specify their desired time level.
 *
 * @docs {@link https://www.vidstack.io/docs/player/components/sliders/time-slider}
 * @slot preview - Used to insert a slider preview.
 * @example
 * ```html
 * <media-time-slider></media-time-slider>
 * ```
 * @example
 * ```html
 * <media-time-slider>
 *   <media-slider-value
 *     type="pointer"
 *     format="time"
 *     slot="preview"
 *   ></media-slider-value>
 * </media-time-slider>
 * ```
 */
export declare class TimeSlider extends Slider<TimeSliderAPI> {
    static el: import("maverick.js/element").CustomElementDefinition<TimeSliderAPI>;
    protected _readonly: boolean;
    protected _swipeGesture: boolean;
    protected _dispatchSeeking: ThrottledSeeking;
    protected _track: import("maverick.js").WriteSignal<TextTrack | null>;
    protected _chaptersRenderer: SliderChaptersRenderer;
    protected _classManager?: ClassManager;
    constructor(instance: ComponentInstance<TimeSliderAPI>);
    protected onAttach(el: HTMLElement): void;
    protected _calcBufferedPercent(): string;
    protected _hasChapters(): boolean | 0 | undefined;
    protected onConnect(el: HTMLElement): void;
    render(): import("maverick.js").JSX.Element;
    protected _watchSeekingThrottle(): void;
    protected _watchCurrentTime(): void;
    protected _watchPreviewing(): void;
    protected _seeking(time: number, event: Event): void;
    protected _seek(time: number, percent: number, event: Event): void;
    protected _playingBeforeDragStart: boolean;
    _onDragStart(event: SliderDragStartEvent): void;
    _onDragValueChange(event: SliderDragValueChangeEvent): void;
    _onDragEnd(event: SliderValueChangeEvent | SliderDragEndEvent): void;
    _onValueChange(event: SliderValueChangeEvent): void;
    _getStep(): number;
    _getKeyStep(): number;
    _roundValue(value: number): number;
    _isDisabled(): boolean;
    protected _getARIAValueMin(): number;
    protected _getARIAValueMax(): number;
    protected _getARIAValueText(): string;
    protected _percentToTime(percent: number): number;
    protected _timeToPercent(time: number): number;
    protected _formatValue(percent: number): string;
    protected _formatTime(percent: number, padHours: boolean | null, padMinutes: boolean | null, showHours: boolean): string;
    protected _chapterTitleEl: HTMLElement | null;
    protected _chapterTitle: import("maverick.js").WriteSignal<string>;
    protected _onTrackModeChange(): void;
    protected _onTrackChange(): (() => void) | undefined;
    protected _onChapterTitleChange(): void;
}
export interface MediaTimeSliderElement extends HTMLCustomElement<TimeSlider> {
}
export interface TimeSliderAPI extends SliderAPI {
    props: TimeSliderProps;
    cssvars: TimeSliderCSSVars;
}
export interface TimeSliderCSSVars extends SliderCSSVars {
    /**
     * The percentage of media playback that has been buffered.
     */
    readonly 'media-buffered-percent': string;
}
export interface TimeSliderProps extends SliderProps {
    chaptersClass: string | null;
    chapterContainerClass: string | null;
    chapterClass: string | null;
    /**
     * Whether it should request playback to pause while the user is dragging the
     * thumb. If the media was playing before the dragging starts, the state will be restored by
     * dispatching a user play request once the dragging ends.
     */
    pauseWhileDragging: boolean;
    /**
     * The amount of milliseconds to throttle media seeking request events being dispatched.
     */
    seekingRequestThrottle: number;
}
interface ThrottledSeeking {
    (time: number, event: Event): void;
    cancel(): void;
}
export {};
