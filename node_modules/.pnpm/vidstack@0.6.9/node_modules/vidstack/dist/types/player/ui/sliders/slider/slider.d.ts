import { Component, ComponentInstance, type HTMLCustomElement } from 'maverick.js/element';
import { type MediaContext } from '../../../core/api/context';
import type { SliderCSSVars } from './api/cssvars';
import type { SliderDragEndEvent, SliderDragStartEvent, SliderDragValueChangeEvent, SliderEvents, SliderValueChangeEvent } from './api/events';
import { type SliderProps } from './api/props';
import { SliderStoreFactory } from './api/store';
declare global {
    interface MaverickElements {
        'media-slider': MediaSliderElement;
    }
}
/**
 * A custom-built range input that is cross-browser friendly, ARIA friendly, mouse/touch-friendly
 * and easily style-able. The slider allows users to input numeric values between a minimum and
 * maximum value.
 * @docs {@link https://www.vidstack.io/docs/player/components/sliders/slider}
 * @example
 * ```html
 * <media-slider min="0" max="100" value="50" aria-label="..."></media-slider>
 * ```
 */
export declare class Slider<T extends SliderAPI = SliderAPI> extends Component<T> {
    static el: import("maverick.js/element").CustomElementDefinition<SliderAPI>;
    protected _media: MediaContext;
    protected _readonly: boolean;
    _orientation: string;
    constructor(instance: ComponentInstance<T>);
    protected onAttach(el: HTMLElement): void;
    protected onConnect(el: HTMLElement): void;
    render(): import("maverick.js").JSX.Element;
    _getStep(): T["props"]["step"];
    _getKeyStep(): T["props"]["keyStep"];
    _roundValue(value: number): number;
    _isDisabled(): T["props"]["disabled"];
    protected _watchMinMax(): void;
    protected _watchDisabled(): void;
    protected _watchValue(): void;
    protected _getARIADisabled(): "true" | "false";
    protected _getARIAValueMin(): T["props"]["min"];
    protected _getARIAValueMax(): T["props"]["max"];
    protected _getARIAValueNow(): number;
    protected _getARIAValueText(): string;
    protected _setAttrs(): void;
    protected _isStyled(): boolean;
    protected _watchCSSVars(): void;
    protected _updateSliderVars: (fillPercent: number, pointerPercent: number) => void;
    protected _preview: HTMLElement | null;
    protected _setupPreview(): void;
    protected _watchPreview(): (() => void) | undefined;
    protected _onPreviewResize: () => void;
    _onValueChange(event: SliderValueChangeEvent): void;
    _onDragStart(event: SliderDragStartEvent): void;
    _onDragEnd(event: SliderDragEndEvent): void;
    _onDragValueChange(event: SliderDragValueChangeEvent): void;
}
export interface SliderAPI {
    props: SliderProps;
    events: SliderEvents;
    cssvars: SliderCSSVars;
    store: typeof SliderStoreFactory;
}
export interface MediaSliderElement extends HTMLCustomElement<Slider> {
}
