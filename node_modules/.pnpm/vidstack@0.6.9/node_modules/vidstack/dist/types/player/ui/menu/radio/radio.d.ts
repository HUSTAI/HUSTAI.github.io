import { Component, ComponentInstance, type HTMLCustomElement } from 'maverick.js/element';
import type { DOMEvent } from 'maverick.js/std';
import { type RadioController } from './context';
declare global {
    interface MaverickElements {
        'media-radio': MediaRadioElement;
    }
}
/**
 * A radio represents a option that a user can select inside of a radio group. Only one radio
 * can be checked in a group.
 *
 * @docs {@link https://www.vidstack.io/docs/player/components/menu/radio}
 * @slot - Used to insert content inside the radio such as the label.
 * @example
 * ```html
 * <media-radio-group value="720">
 *   <media-radio value="1080">1080p</media-radio>
 *   <media-radio value="720">720p</media-radio>
 *   <!-- ... -->
 * </media-radio-group>
 * ```
 */
export declare class Radio extends Component<RadioAPI> {
    static el: import("maverick.js/element").CustomElementDefinition<RadioAPI>;
    protected _checked: import("maverick.js").WriteSignal<boolean>;
    protected _controller: RadioController;
    /**
     * Whether this radio is currently checked.
     */
    get checked(): boolean;
    constructor(instance: ComponentInstance<RadioAPI>);
    protected onAttach(): void;
    protected onConnect(el: HTMLElement): void;
    protected onDisconnect(): void;
    protected _addToGroup(): void;
    protected _watchValue(): void;
    protected _onPress(event: Event): void;
    protected _check(value: boolean, trigger?: Event): void;
    render(): import("maverick.js").JSX.Element;
}
export interface RadioAPI {
    props: RadioProps;
    events: RadioEvents;
}
export interface RadioProps {
    /** The radio value. */
    value: string;
}
export interface RadioEvents {
    change: RadioChangeEvent;
}
/**
 * Fired when the radio's checked value changes.
 */
export interface RadioChangeEvent extends DOMEvent<void> {
    target: MediaRadioElement;
}
export interface MediaRadioElement extends HTMLCustomElement<Radio> {
}
