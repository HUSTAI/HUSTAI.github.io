import { type ReadSignal } from 'maverick.js';
/**
 * Efficient way of applying dynamic class signals to arbitrary DOM selectors. This is to avoid
 * creating multiple effects for each selector/class pair.
 */
export declare class ClassManager {
    protected _root: Element;
    protected _observer: MutationObserver;
    protected _map: Map<string, ReadSignal<string | null>>;
    protected _classes: import("maverick.js").WriteSignal<ReadSignal<string | null>[]>;
    constructor(el: HTMLElement);
    protected _onMutation(records: MutationRecord[]): void;
    _observe(selector: string, $class: ReadSignal<string | null>): this;
    _requestUpdate: () => void;
    protected _update(): void;
    protected _watch(): void;
    protected _destroy(): void;
}
