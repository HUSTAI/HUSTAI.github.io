import { isUndefined, isFunction2, waitTimeout, isString, isNumber, setAttribute, useDisposalBin, effect2, onDispose, listenEvent, DOMEvent, isNil } from './chunk-BFUJ5USN.js';

// src/utils/support.ts
var UA = navigator?.userAgent.toLowerCase();
var IS_IOS = /iphone|ipad|ipod|ios|crios|fxios/i.test(UA);
var IS_IPHONE = /(iphone|ipod)/gi.test(navigator?.platform);
var IS_CHROME = !!window.chrome;
var IS_SAFARI = !!window.safari || IS_IOS;
function canOrientScreen() {
  return !isUndefined(screen.orientation) && isFunction2(screen.orientation.lock) && isFunction2(screen.orientation.unlock);
}
function canPlayHLSNatively(video) {
  if (!video)
    video = document.createElement("video");
  return video.canPlayType("application/vnd.apple.mpegurl").length > 0;
}
function canUsePictureInPicture(video) {
  return !!document.pictureInPictureEnabled && !video.disablePictureInPicture;
}
function canUseVideoPresentation(video) {
  return isFunction2(video.webkitSupportsPresentationMode) && isFunction2(video.webkitSetPresentationMode);
}
async function canChangeVolume() {
  const video = document.createElement("video");
  video.volume = 0.5;
  await waitTimeout(0);
  return video.volume === 0.5;
}
function getMediaSource() {
  return window?.MediaSource ?? window?.WebKitMediaSource;
}
function getSourceBuffer() {
  return window?.SourceBuffer ?? window?.WebKitSourceBuffer;
}
function isHLSSupported() {
  const MediaSource = getMediaSource();
  if (isUndefined(MediaSource))
    return false;
  const isTypeSupported = MediaSource && isFunction2(MediaSource.isTypeSupported) && MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
  const SourceBuffer = getSourceBuffer();
  const isSourceBufferValid = isUndefined(SourceBuffer) || !isUndefined(SourceBuffer.prototype) && isFunction2(SourceBuffer.prototype.appendBuffer) && isFunction2(SourceBuffer.prototype.remove);
  return !!isTypeSupported && !!isSourceBufferValid;
}

// src/utils/mime.ts
var AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
var AUDIO_TYPES = /* @__PURE__ */ new Set([
  "audio/mpeg",
  "audio/ogg",
  "audio/3gp",
  "audio/mp4",
  "audio/webm",
  "audio/flac"
]);
var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
var VIDEO_TYPES = /* @__PURE__ */ new Set([
  "video/mp4",
  "video/webm",
  "video/3gp",
  "video/ogg",
  "video/avi",
  "video/mpeg"
]);
var HLS_VIDEO_EXTENSIONS = /\.(m3u8)($|\?)/i;
var HLS_VIDEO_TYPES = /* @__PURE__ */ new Set([
  // Apple sanctioned
  "application/vnd.apple.mpegurl",
  // Apple sanctioned for backwards compatibility
  "audio/mpegurl",
  // Very common
  "audio/x-mpegurl",
  // Very common
  "application/x-mpegurl",
  // Included for completeness
  "video/x-mpegurl",
  "video/mpegurl",
  "application/mpegurl"
]);
function isHLSSrc({ src, type }) {
  return isString(src) && HLS_VIDEO_EXTENSIONS.test(src) || HLS_VIDEO_TYPES.has(type);
}
function isMediaStream(src) {
  return !isUndefined(window.MediaStream) && src instanceof window.MediaStream;
}

// src/foundation/observers/raf-loop.ts
var RAFLoop = class {
  constructor(_callback) {
    this._callback = _callback;
  }
  _start() {
    if (!isUndefined(this._id))
      return;
    this._loop();
  }
  _stop() {
    if (isNumber(this._id))
      window.cancelAnimationFrame(this._id);
    this._id = void 0;
  }
  _loop() {
    this._id = window.requestAnimationFrame(() => {
      if (isUndefined(this._id))
        return;
      this._callback();
      this._loop();
    });
  }
};

// src/utils/number.ts
function round(num, decimalPlaces = 2) {
  return Number(num.toFixed(decimalPlaces));
}
function getNumberOfDecimalPlaces(num) {
  return String(num).split(".")[1]?.length ?? 0;
}
function clampNumber(min, value, max) {
  return Math.max(min, Math.min(max, value));
}

// src/player/core/providers/html/htmlâ€“media-events.ts
var HTMLMediaEvents = class {
  constructor(_provider, _context) {
    this._provider = _provider;
    this._context = _context;
    this._disposal = useDisposalBin();
    this._waiting = false;
    this._attachedLoadStart = false;
    this._attachedCanPlay = false;
    this._timeRAF = new RAFLoop(this._onRAF.bind(this));
    this._handlers = /* @__PURE__ */ new Map() ;
    this._handleDevEvent = this._onDevEvent.bind(this) ;
    this._attachInitialListeners();
    effect2(this._attachTimeUpdate.bind(this));
    onDispose(this._onDispose.bind(this));
  }
  get _media() {
    return this._provider.media;
  }
  get _delegate() {
    return this._context.delegate;
  }
  _onDispose() {
    this._timeRAF._stop();
    this._disposal.empty();
  }
  /**
   * The `timeupdate` event fires surprisingly infrequently during playback, meaning your progress
   * bar (or whatever else is synced to the currentTime) moves in a choppy fashion. This helps
   * resolve that by retrieving time updates in a request animation frame loop.
   */
  _onRAF() {
    const newTime = this._provider.currentTime;
    if (this._context.$store.currentTime() !== newTime)
      this._updateCurrentTime(newTime);
  }
  _attachInitialListeners() {
    this._attachEventListener("loadstart", this._onLoadStart);
    this._attachEventListener("abort", this._onAbort);
    this._attachEventListener("emptied", this._onEmptied);
    this._attachEventListener("error", this._onError);
    this._context.logger?.debug("attached initial media event listeners");
  }
  _attachLoadStartListeners() {
    if (this._attachedLoadStart)
      return;
    this._disposal.add(
      this._attachEventListener("loadeddata", this._onLoadedData),
      this._attachEventListener("loadedmetadata", this._onLoadedMetadata),
      this._attachEventListener("canplay", this._onCanPlay),
      this._attachEventListener("canplaythrough", this._onCanPlayThrough),
      this._attachEventListener("durationchange", this._onDurationChange),
      this._attachEventListener("play", this._onPlay),
      this._attachEventListener("progress", this._onProgress),
      this._attachEventListener("stalled", this._onStalled),
      this._attachEventListener("suspend", this._onSuspend)
    );
    this._attachedLoadStart = true;
  }
  _attachCanPlayListeners() {
    if (this._attachedCanPlay)
      return;
    this._disposal.add(
      this._attachEventListener("pause", this._onPause),
      this._attachEventListener("playing", this._onPlaying),
      this._attachEventListener("ratechange", this._onRateChange),
      this._attachEventListener("seeked", this._onSeeked),
      this._attachEventListener("seeking", this._onSeeking),
      this._attachEventListener("ended", this._onEnded),
      this._attachEventListener("volumechange", this._onVolumeChange),
      this._attachEventListener("waiting", this._onWaiting)
    );
    this._attachedCanPlay = true;
  }
  _attachEventListener(eventType, handler) {
    this._handlers.set(eventType, handler);
    return listenEvent(
      this._media,
      eventType,
      this._handleDevEvent 
    );
  }
  _onDevEvent(event2) {
    this._context.logger?.debugGroup(`\u{1F4FA} fired \`${event2.type}\``).labelledLog("Event", event2).labelledLog("Media Store", { ...this._context.$store }).dispatch();
    this._handlers.get(event2.type)?.call(this, event2);
  }
  _updateCurrentTime(time, trigger) {
    this._delegate._dispatch("time-update", {
      // Avoid errors where `currentTime` can have higher precision.
      detail: {
        currentTime: Math.min(time, this._context.$store.seekableEnd()),
        played: this._media.played
      },
      trigger
    });
  }
  _onLoadStart(event2) {
    if (this._media.networkState === 3) {
      this._onAbort(event2);
      return;
    }
    this._attachLoadStartListeners();
    this._delegate._dispatch("load-start", { trigger: event2 });
  }
  _onAbort(event2) {
    this._delegate._dispatch("abort", { trigger: event2 });
  }
  _onEmptied() {
    this._delegate._dispatch("emptied", { trigger: event });
  }
  _onLoadedData(event2) {
    this._delegate._dispatch("loaded-data", { trigger: event2 });
  }
  _onLoadedMetadata(event2) {
    this._onStreamTypeChange();
    this._attachCanPlayListeners();
    this._delegate._dispatch("volume-change", {
      detail: {
        volume: this._media.volume,
        muted: this._media.muted
      }
    });
    this._delegate._dispatch("loaded-metadata", { trigger: event2 });
    if (IS_SAFARI && isHLSSrc(this._context.$store.source())) {
      this._delegate._ready(this._getCanPlayDetail(), event2);
    }
  }
  _getCanPlayDetail() {
    return {
      duration: this._media.duration,
      buffered: this._media.buffered,
      seekable: this._media.seekable
    };
  }
  _onStreamTypeChange() {
    const isLive = !Number.isFinite(this._media.duration);
    this._delegate._dispatch("stream-type-change", {
      detail: isLive ? "live" : "on-demand"
    });
  }
  _onPlay(event2) {
    if (!this._context.$store.canPlay)
      return;
    this._delegate._dispatch("play", { trigger: event2 });
  }
  _onPause(event2) {
    if (this._media.readyState === 1 && !this._waiting)
      return;
    this._waiting = false;
    this._timeRAF._stop();
    this._delegate._dispatch("pause", { trigger: event2 });
  }
  _onCanPlay(event2) {
    this._delegate._ready(this._getCanPlayDetail(), event2);
  }
  _onCanPlayThrough(event2) {
    if (this._context.$store.started())
      return;
    this._delegate._dispatch("can-play-through", {
      trigger: event2,
      detail: this._getCanPlayDetail()
    });
  }
  _onPlaying(event2) {
    this._waiting = false;
    this._delegate._dispatch("playing", { trigger: event2 });
    this._timeRAF._start();
  }
  _onStalled(event2) {
    this._delegate._dispatch("stalled", { trigger: event2 });
    if (this._media.readyState < 3) {
      this._waiting = true;
      this._delegate._dispatch("waiting", { trigger: event2 });
    }
  }
  _onWaiting(event2) {
    if (this._media.readyState < 3) {
      this._waiting = true;
      this._delegate._dispatch("waiting", { trigger: event2 });
    }
  }
  _onEnded(event2) {
    this._timeRAF._stop();
    this._updateCurrentTime(this._media.duration, event2);
    this._delegate._dispatch("end", { trigger: event2 });
    if (this._context.$store.loop()) {
      this._onLoop();
    } else {
      this._delegate._dispatch("ended", { trigger: event2 });
    }
  }
  _attachTimeUpdate() {
    if (this._context.$store.paused()) {
      listenEvent(this._media, "timeupdate", this._onTimeUpdate.bind(this));
    }
  }
  _onTimeUpdate(event2) {
    this._updateCurrentTime(this._media.currentTime, event2);
  }
  _onDurationChange(event2) {
    this._onStreamTypeChange();
    if (this._context.$store.ended()) {
      this._updateCurrentTime(this._media.duration, event2);
    }
    this._delegate._dispatch("duration-change", {
      detail: this._media.duration,
      trigger: event2
    });
  }
  _onVolumeChange(event2) {
    this._delegate._dispatch("volume-change", {
      detail: {
        volume: this._media.volume,
        muted: this._media.muted
      },
      trigger: event2
    });
  }
  _onSeeked(event2) {
    this._updateCurrentTime(this._media.currentTime, event2);
    this._delegate._dispatch("seeked", {
      detail: this._media.currentTime,
      trigger: event2
    });
    if (Math.trunc(this._media.currentTime) === Math.trunc(this._media.duration) && getNumberOfDecimalPlaces(this._media.duration) > getNumberOfDecimalPlaces(this._media.currentTime)) {
      this._updateCurrentTime(this._media.duration, event2);
      if (!this._media.ended) {
        this._context.player.dispatchEvent(
          new DOMEvent("media-play-request", {
            trigger: event2
          })
        );
      }
    }
  }
  _onSeeking(event2) {
    this._delegate._dispatch("seeking", {
      detail: this._media.currentTime,
      trigger: event2
    });
  }
  _onProgress(event2) {
    this._delegate._dispatch("progress", {
      detail: {
        buffered: this._media.buffered,
        seekable: this._media.seekable
      },
      trigger: event2
    });
  }
  _onLoop() {
    const hasCustomControls = isNil(this._media.controls);
    if (hasCustomControls)
      this._media.controls = false;
    this._context.player.dispatchEvent(new DOMEvent("media-loop-request"));
  }
  _onSuspend(event2) {
    this._delegate._dispatch("suspend", { trigger: event2 });
  }
  _onRateChange(event2) {
    this._delegate._dispatch("rate-change", {
      detail: this._media.playbackRate,
      trigger: event2
    });
  }
  _onError(event2) {
    const error = this._media.error;
    if (!error)
      return;
    this._delegate._dispatch("error", {
      detail: {
        message: error.message,
        code: error.code,
        mediaError: error
      },
      trigger: event2
    });
  }
};

// src/foundation/list/symbols.ts
var LIST_ADD = Symbol("LIST_ADD" );
var LIST_REMOVE = Symbol("LIST_REMOVE" );
var LIST_RESET = Symbol("LIST_RESET" );
var LIST_SELECT = Symbol("LIST_SELECT" );
var LIST_READONLY = Symbol("LIST_READONLY" );
var LIST_SET_READONLY = Symbol("LIST_SET_READONLY" );
var LIST_ON_RESET = Symbol("LIST_ON_RESET" );
var LIST_ON_REMOVE = Symbol("LIST_ON_REMOVE" );
var LIST_ON_USER_SELECT = Symbol("LIST_ON_USER_SELECT" );

// src/player/core/providers/html/native-audio-tracks.ts
var NativeAudioTracks = class {
  constructor(_provider, _context) {
    this._provider = _provider;
    this._context = _context;
    this._nativeTracks.onaddtrack = this._onAddNativeTrack.bind(this);
    this._nativeTracks.onremovetrack = this._onRemoveNativeTrack.bind(this);
    this._nativeTracks.onchange = this._onChangeNativeTrack.bind(this);
    listenEvent(this._context.audioTracks, "change", this._onChangeTrack.bind(this));
  }
  get _nativeTracks() {
    return this._provider.media.audioTracks;
  }
  _onAddNativeTrack(event2) {
    const _track = event2.track;
    if (_track.label === "")
      return;
    const audioTrack = {
      id: _track.id + "",
      label: _track.label,
      language: _track.language,
      kind: _track.kind,
      selected: false
    };
    this._context.audioTracks[LIST_ADD](audioTrack, event2);
    if (_track.enabled)
      audioTrack.selected = true;
  }
  _onRemoveNativeTrack(event2) {
    const track = this._context.audioTracks.getById(event2.track.id);
    if (track)
      this._context.audioTracks[LIST_REMOVE](track, event2);
  }
  _onChangeNativeTrack(event2) {
    let enabledTrack = this._getEnabledNativeTrack();
    if (!enabledTrack)
      return;
    const track = this._context.audioTracks.getById(enabledTrack.id);
    if (track)
      this._context.audioTracks[LIST_SELECT](track, true, event2);
  }
  _getEnabledNativeTrack() {
    return Array.from(this._nativeTracks).find((track) => track.enabled);
  }
  _onChangeTrack(event2) {
    const { current } = event2.detail;
    if (!current)
      return;
    const track = this._nativeTracks.getTrackById(current.id);
    if (track) {
      const prev = this._getEnabledNativeTrack();
      if (prev)
        prev.enabled = false;
      track.enabled = true;
    }
  }
};

// src/player/core/providers/html/provider.ts
var HTMLMediaProvider = class {
  constructor(_media) {
    this._media = _media;
  }
  setup(context) {
    new HTMLMediaEvents(this, context);
    if ("audioTracks" in this.media)
      new NativeAudioTracks(this, context);
  }
  get type() {
    return "";
  }
  get media() {
    return this._media;
  }
  get paused() {
    return this._media.paused;
  }
  get muted() {
    return this._media.muted;
  }
  set muted(muted) {
    this._media.muted = muted;
  }
  get volume() {
    return this._media.volume;
  }
  set volume(volume) {
    this._media.volume = volume;
  }
  get currentTime() {
    return this._media.currentTime;
  }
  set currentTime(time) {
    this._media.currentTime = time;
  }
  get playsinline() {
    return this._media.hasAttribute("playsinline");
  }
  set playsinline(playsinline) {
    setAttribute(this._media, "playsinline", playsinline);
  }
  get playbackRate() {
    return this._media.playbackRate;
  }
  set playbackRate(rate) {
    this._media.playbackRate = rate;
  }
  async play() {
    return this._media.play();
  }
  async pause() {
    return this._media.pause();
  }
  async loadSource({ src }, preload) {
    this._media.preload = preload;
    if (isMediaStream(src)) {
      this._media.srcObject = src;
    } else {
      this._media.srcObject = null;
      this._media.src = isString(src) ? src : window.URL.createObjectURL(src);
    }
    this._media.load();
  }
};

export { AUDIO_EXTENSIONS, AUDIO_TYPES, HLS_VIDEO_EXTENSIONS, HLS_VIDEO_TYPES, HTMLMediaProvider, IS_CHROME, IS_IPHONE, IS_SAFARI, LIST_ADD, LIST_ON_REMOVE, LIST_ON_RESET, LIST_ON_USER_SELECT, LIST_READONLY, LIST_REMOVE, LIST_RESET, LIST_SELECT, LIST_SET_READONLY, RAFLoop, VIDEO_EXTENSIONS, VIDEO_TYPES, canChangeVolume, canOrientScreen, canPlayHLSNatively, canUsePictureInPicture, canUseVideoPresentation, clampNumber, getNumberOfDecimalPlaces, isHLSSrc, isHLSSupported, round };
