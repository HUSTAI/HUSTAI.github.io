import { findActiveCue } from './chunk-NOPW2CG3.js';
import { $ariaBool } from './chunk-EVP5E6AO.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_ssr, $$_attr } from 'maverick.js/ssr';
import { signal, effect, peek } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';
import { animationFrameThrottle } from 'maverick.js/std';

var $$_templ = ["<!$><img", "", ' part="img" loading="eager" decoding="async" aria-hidden="true" />'];
var Thumbnail = class extends Component {
  constructor(instance) {
    super(instance);
    this._img = null;
    this._coords = null;
    this._styleResets = [];
    this._src = signal("");
    this._loaded = signal(false);
    this._activeCue = signal(null);
    this._requestResize = animationFrameThrottle(this._resize.bind(this));
    this._media = useMedia();
  }
  onAttach() {
    this.setAttributes({
      "data-loading": this._isLoading.bind(this),
      "aria-hidden": $ariaBool(this._isHidden.bind(this))
    });
  }
  onConnect() {
    effect(this._onLoadStart.bind(this));
    effect(this._onFindActiveCue.bind(this));
    effect(this._onResolveThumbnail.bind(this));
  }
  _onLoadStart() {
    this._src();
    this._media.$store.thumbnails();
    this._loaded.set(false);
  }
  _onLoaded() {
    this._loaded.set(true);
    this._requestResize();
  }
  _isLoading() {
    return !this._isHidden() && !this._loaded();
  }
  _isHidden() {
    const { duration, thumbnailCues } = this._media.$store;
    return !Number.isFinite(duration()) || thumbnailCues().length === 0;
  }
  _onFindActiveCue() {
    const { time } = this.$props, { duration, thumbnailCues } = this._media.$store, _cues = thumbnailCues(), _time = time();
    if (!_cues || !Number.isFinite(duration())) {
      this._activeCue.set(null);
      return;
    }
    this._activeCue.set(findActiveCue(_time, _cues));
  }
  _onImgRef(el) {
    this._img = el;
  }
  _onResolveThumbnail() {
    const activeCue = this._activeCue(), thumbnails = peek(this._media.$store.thumbnails);
    if (!thumbnails || !activeCue) {
      this._src.set("");
      this._resetStyles();
      return;
    }
    const [_src, _coords = ""] = (activeCue.text || "").split("#");
    this._coords = this._resolveThumbnailCoords(_coords);
    if (!this._coords) {
      this._resetStyles();
      return;
    }
    this._src.set(this._resolveThumbnailSrc(thumbnails, _src));
    this._requestResize();
  }
  _resolveThumbnailSrc(baseURL, src) {
    return !/https?:/.test(src) ? `${baseURL.split("/").slice(0, -1).join("/")}${src.replace(/^\/?/, "/")}`.replace(
      /^\/\//,
      "/"
    ) : src;
  }
  _resolveThumbnailCoords(coords) {
    const [props, values] = coords.split("="), resolvedCoords = {}, coordValues = values == null ? void 0 : values.split(",");
    if (!props || !values)
      return null;
    for (let i = 0; i < props.length; i++)
      resolvedCoords[props[i]] = +coordValues[i];
    return resolvedCoords;
  }
  _resize() {
    if (!this._img || !this._coords || !this.el)
      return;
    const { w, h, x, y } = this._coords, { maxWidth, maxHeight, minWidth, minHeight } = getComputedStyle(this.el), minRatio = Math.max(parseInt(minWidth) / w, parseInt(minHeight) / h), maxRatio = Math.min(parseInt(maxWidth) / w, parseInt(maxHeight) / h), scale = maxRatio < 1 ? maxRatio : minRatio > 1 ? minRatio : 1;
    this._style(this.el, "--thumbnail-width", `${w * scale}px`);
    this._style(this.el, "--thumbnail-height", `${h * scale}px`);
    this._style(this._img, "width", `${this._img.naturalWidth * scale}px`);
    this._style(this._img, "height", `${this._img.naturalHeight * scale}px`);
    this._style(this._img, "transform", `translate(-${x * scale}px, -${y * scale}px)`);
  }
  _style(el, name, value) {
    el.style.setProperty(name, value);
    this._styleResets.push(() => el.style.removeProperty(name));
  }
  _resetStyles() {
    for (const reset of this._styleResets)
      reset();
    this._styleResets = [];
  }
  render() {
    const { crossorigin } = this._media.$store;
    return $$_ssr($$_templ, $$_attr("src", this._src), $$_attr("crossorigin", crossorigin));
  }
};
Thumbnail.el = defineElement({
  tagName: "media-thumbnail",
  props: { time: 0 }
});

export { Thumbnail };
