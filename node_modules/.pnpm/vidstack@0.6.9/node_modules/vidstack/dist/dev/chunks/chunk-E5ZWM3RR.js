import { renderRadioGroup } from './chunk-KRJ7Q224.js';
import { ClassManager } from './chunk-XCUHASYJ.js';
import { RadioGroup } from './chunk-MIWMXUN7.js';
import { Radio } from './chunk-P2N5WSLT.js';
import { MenuItems } from './chunk-6F6XCALD.js';
import { isTrackCaptionKind } from './chunk-2SNW2HZF.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_insert_at_marker_lite, $$_create_template } from 'maverick.js/dom';
import { effect } from 'maverick.js';
import { defineElement } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`);
var $$_templ_2 = $$_templ;
var CaptionsMenuItems = class extends MenuItems {
  constructor(instance) {
    super(instance);
    this._media = useMedia();
  }
  onConnect(el) {
    effect(this._watchControllerDisabled.bind(this));
    effect(this._watchHintText.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el)._observe("media-radio", radioClass)._observe('[part="check"]', radioCheckClass);
  }
  _watchHintText() {
    const { offLabel } = this.$props, { textTrack } = this._media.$store, track = textTrack();
    this._menu._hint.set(
      track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label : offLabel()
    );
  }
  _watchControllerDisabled() {
    this._menu._disable(this._isDisabled());
  }
  _isDisabled() {
    const { textTracks } = this._media.$store;
    return textTracks().filter(isTrackCaptionKind).length === 0;
  }
  _onChange(event) {
    if (this._isDisabled())
      return;
    const radioGroup = event.target;
    const value = radioGroup.value;
    if (value === "off") {
      const track = this._media.textTracks.selected;
      if (track) {
        const index2 = this._media.textTracks.toArray().indexOf(track);
        this._media.remote.changeTextTrackMode(index2, "disabled", event);
      }
      return;
    }
    const index = this._media.textTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0)
      this._media.remote.changeTextTrackMode(index, "showing", event);
  }
  _getValue() {
    const { textTrack, textTracks } = this._media.$store, track = textTrack();
    return track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label.toLowerCase() : "off";
  }
  _getOptions() {
    const { offLabel } = this.$props, { textTracks } = this._media.$store;
    return [
      { value: "off", content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, offLabel);
        return $$_root;
      })() },
      ...textTracks().filter(isTrackCaptionKind).map((track) => ({
        value: track.label.toLowerCase(),
        content: () => (() => {
          const [$$_root, $$_walker] = $$_create_walker($$_templ_2), $$_expr = $$_walker.nextNode();
          $$_insert_at_marker_lite($$_expr, track.label);
          return $$_root;
        })()
      }))
    ];
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this._getValue.bind(this),
      options: this._getOptions.bind(this),
      radioGroupClass,
      onChange: this._onChange.bind(this)
    });
  }
};
CaptionsMenuItems.el = defineElement({
  tagName: "media-captions-menu-items",
  props: {
    offLabel: "Off",
    radioClass: null,
    radioGroupClass: null,
    radioCheckClass: null
  }
});
CaptionsMenuItems.register = [RadioGroup, Radio];

export { CaptionsMenuItems };
