import { formatTime } from './chunk-JY53PGKC.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_insert_at_marker_lite, $$_create_template } from 'maverick.js/dom';
import { computed } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';
import { isNull } from 'maverick.js/std';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><span><!$></span>`);
var Time = class extends Component {
  onAttach() {
    this._media = useMedia();
    this._time = computed(this._getTime.bind(this));
  }
  _getTime() {
    const { type, remainder, padHours, padMinutes, showHours } = this.$props, seconds = this._getSeconds(type()), duration = this._media.$store.duration();
    if (!Number.isFinite(seconds + duration))
      return "LIVE";
    const time = remainder() ? Math.max(0, duration - seconds) : seconds;
    return formatTime(
      time,
      padHours(),
      isNull(padMinutes()) ? time >= 3600 : padMinutes(),
      showHours()
    );
  }
  _getSeconds(type) {
    const { bufferedEnd, duration, currentTime } = this._media.$store;
    switch (type) {
      case "buffered":
        return bufferedEnd();
      case "duration":
        return duration();
      default:
        return currentTime();
    }
  }
  render() {
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ), $$_expr = $$_walker.nextNode();
      $$_insert_at_marker_lite($$_expr, this._time);
      return $$_root;
    })();
  }
};
Time.el = defineElement({
  tagName: "media-time",
  props: {
    type: "current",
    showHours: false,
    padHours: null,
    padMinutes: null,
    remainder: false
  }
});

export { Time };
