import { setAttributeIfEmpty, onPress } from './chunk-HQQTSFXD.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { TooltipController } from './chunk-YQQPXCW6.js';
import { FocusVisibleController } from './chunk-IQ5YT2BQ.js';
import { __decorateClass } from './chunk-VPSTUDLO.js';
import { signal, peek, isWriteSignal, onDispose } from 'maverick.js';
import { defineElement, prop, Component, ComponentController } from 'maverick.js/element';
import { ariaBool } from 'maverick.js/std';

var ARIAKeyShortcuts = class extends ComponentController {
  constructor(instance, _shortcut) {
    super(instance);
    this._shortcut = _shortcut;
  }
  onAttach(el) {
    const { $props, ariaKeys } = useMedia(), keys = el.getAttribute("aria-keyshortcuts");
    if (keys) {
      ariaKeys[this._shortcut] = keys;
      {
        onDispose(() => {
          delete ariaKeys[this._shortcut];
        });
      }
      return;
    }
    const shortcuts = $props.keyShortcuts()[this._shortcut];
    if (shortcuts)
      el.setAttribute("aria-keyshortcuts", shortcuts);
  }
};

// src/player/ui/buttons/toggle-button.tsx
var toggleButtonProps = {
  disabled: false,
  defaultPressed: false,
  defaultAppearance: false
};
var ToggleButton = class extends Component {
  constructor(instance) {
    super(instance);
    this._pressed = signal(false);
    new FocusVisibleController(instance);
    new TooltipController(instance);
    if (this._keyShortcut)
      new ARIAKeyShortcuts(instance, this._keyShortcut);
  }
  get pressed() {
    return peek(this._pressed);
  }
  onAttach(el) {
    if (isWriteSignal(this._pressed)) {
      this._pressed.set(this.$props.defaultPressed());
    }
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    const { disabled, defaultAppearance } = this.$props;
    this.setAttributes({
      disabled,
      "default-appearance": defaultAppearance,
      "data-pressed": this._pressed,
      "aria-pressed": this._isARIAPressed.bind(this),
      "data-media-button": true
    });
  }
  onConnect(el) {
    onPress(el, this._onMaybePress.bind(this));
  }
  _isARIAPressed() {
    return ariaBool(this._pressed());
  }
  _onPress(event) {
    if (isWriteSignal(this._pressed)) {
      this._pressed.set((p) => !p);
    }
  }
  _onMaybePress(event) {
    const disabled = this.$props.disabled();
    if (disabled) {
      if (disabled)
        event.stopImmediatePropagation();
      return;
    }
    event.preventDefault();
    this._onPress(event);
  }
};
ToggleButton.el = defineElement({
  tagName: "media-toggle-button",
  props: toggleButtonProps
});
__decorateClass([
  prop
], ToggleButton.prototype, "pressed", 1);

export { ToggleButton, toggleButtonProps };
