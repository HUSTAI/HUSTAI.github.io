import { radioGroupContext } from './chunk-4L7R5OAB.js';
import { $ariaBool } from './chunk-EVP5E6AO.js';
import { onPress } from './chunk-HQQTSFXD.js';
import { menuContext } from './chunk-HSL7QSWM.js';
import { FocusVisibleController } from './chunk-IQ5YT2BQ.js';
import { __decorateClass } from './chunk-VPSTUDLO.js';
import { $$_next_template, $$_create_template } from 'maverick.js/dom';
import { signal, effect, hasProvidedContext, useContext, peek } from 'maverick.js';
import { defineElement, prop, Component } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><div part="check"></div>`);
var Radio = class extends Component {
  constructor(instance) {
    super(instance);
    this._checked = signal(false);
    this._controller = {
      _value: this.$props.value,
      _check: this._check.bind(this),
      _onCheck: null
    };
    new FocusVisibleController(instance);
  }
  get checked() {
    return this._checked();
  }
  onAttach() {
    effect(this._watchValue.bind(this));
    this._addToGroup();
    const isMenuItem = hasProvidedContext(menuContext);
    this.setAttributes({
      value: this.$props.value,
      role: isMenuItem ? "menuitemradio" : "radio",
      tabindex: isMenuItem ? -1 : 0,
      "aria-checked": $ariaBool(this._checked)
    });
  }
  onConnect(el) {
    this._addToGroup();
    onPress(el, this._onPress.bind(this));
  }
  onDisconnect() {
    const group = useContext(radioGroupContext);
    group.remove(this._controller);
  }
  _addToGroup() {
    const group = useContext(radioGroupContext);
    group.add(this._controller);
  }
  _watchValue() {
    const { value } = this.$props, newValue = value();
    if (peek(this._checked)) {
      this._controller._onCheck?.(newValue);
    }
  }
  _onPress(event) {
    if (peek(this._checked))
      return;
    this._checked.set(true);
    this.dispatch("change", { trigger: event });
    this._controller._onCheck?.(peek(this.$props.value), event);
  }
  _check(value, trigger) {
    if (peek(this._checked) === value)
      return;
    this._checked.set(value);
    this.dispatch("change", { trigger });
  }
  render() {
    return $$_next_template($$_templ);
  }
};
Radio.el = defineElement({
  tagName: "media-radio",
  props: { value: "" }
});
__decorateClass([
  prop
], Radio.prototype, "checked", 1);

export { Radio };
