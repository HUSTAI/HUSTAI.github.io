import { radioGroupContext } from './chunk-4L7R5OAB.js';
import { setAttributeIfEmpty } from './chunk-HQQTSFXD.js';
import { menuContext } from './chunk-HSL7QSWM.js';
import { __decorateClass } from './chunk-VPSTUDLO.js';
import { signal, provideContext, hasProvidedContext, effect, peek } from 'maverick.js';
import { defineElement, prop, Component } from 'maverick.js/element';

var RadioGroup = class extends Component {
  constructor(instance) {
    super(instance);
    this._group = /* @__PURE__ */ new Set();
    this._value = signal("");
    this._onChangeBind = this._onChange.bind(this);
    provideContext(radioGroupContext, {
      add: this._addRadio.bind(this),
      remove: this._removeRadio.bind(this)
    });
  }
  get values() {
    return Array.from(this._group).map((radio) => radio._value());
  }
  get value() {
    return this._value();
  }
  set value(value) {
    this._onChange(value);
  }
  onAttach(el) {
    const isMenuItem = hasProvidedContext(menuContext);
    if (!isMenuItem)
      setAttributeIfEmpty(el, "role", "radiogroup");
    this._watchValueProp();
    this.setAttributes({ value: this._value });
  }
  onConnect() {
    effect(this._watchValueProp.bind(this));
  }
  onDestroy() {
    this._group.clear();
  }
  _addRadio(radio) {
    if (this._group.has(radio))
      return;
    this._group.add(radio);
    radio._onCheck = this._onChangeBind;
    radio._check(radio._value() === this._value());
  }
  _removeRadio(radio) {
    radio._onCheck = null;
    this._group.delete(radio);
  }
  _watchValueProp() {
    this._onChange(this.$props.value());
  }
  _onChange(newValue, trigger) {
    const currentValue = peek(this._value);
    if (!newValue || newValue === currentValue)
      return;
    const currentRadio = this._findRadio(currentValue), newRadio = this._findRadio(newValue);
    currentRadio?._check(false, trigger);
    newRadio?._check(true, trigger);
    this._value.set(newValue);
    this.dispatch("change", { trigger });
  }
  _findRadio(newValue) {
    for (const radio of this._group) {
      if (newValue === peek(radio._value))
        return radio;
    }
    return null;
  }
};
RadioGroup.el = defineElement({
  tagName: "media-radio-group",
  props: { value: "" }
});
__decorateClass([
  prop
], RadioGroup.prototype, "values", 1);
__decorateClass([
  prop
], RadioGroup.prototype, "value", 1);

export { RadioGroup };
