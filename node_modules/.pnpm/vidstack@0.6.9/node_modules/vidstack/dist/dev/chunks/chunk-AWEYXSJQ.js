import { SliderStoreFactory } from './chunk-53B74NMI.js';
import { $ariaBool } from './chunk-EVP5E6AO.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_effect, $$_attr, $$_listen, $$_ref, $$_create_template } from 'maverick.js/dom';
import { signal, useStore, computed, effect } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><video muted="" playsinline="" preload="auto" part="video" style="max-width: unset"></video>`);
var SliderVideo = class extends Component {
  constructor() {
    super(...arguments);
    this._video = null;
    this._canPlay = signal(false);
    this._error = signal(false);
  }
  onAttach() {
    this._media = useMedia();
    this._slider = useStore(SliderStoreFactory);
    this._src = computed(this._getSrc.bind(this));
    this._hidden = computed(this._isHidden.bind(this));
    this.setAttributes({
      "data-loading": this._isLoading.bind(this),
      "aria-hidden": $ariaBool(this._hidden)
    });
    effect(this._onSrcChange.bind(this));
    effect(this._onTimeUpdate.bind(this));
  }
  onConnect() {
    if (this._video.readyState >= 2)
      this._onCanPlay();
  }
  render() {
    const { crossorigin } = this._media.$store;
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ);
      $$_effect(() => $$_attr($$_root, "src", this._src()));
      $$_effect(() => $$_attr($$_root, "crossorigin", crossorigin()));
      $$_listen($$_root, "canplay", this._onCanPlay.bind(this));
      $$_listen($$_root, "error", this._onError.bind(this));
      $$_ref($$_root, this._setVideo.bind(this));
      return $$_root;
    })();
  }
  _getSrc() {
    const { canLoad } = this._media.$store;
    return canLoad() ? this.$props.src() : null;
  }
  _isLoading() {
    return !this._canPlay() && !this._hidden();
  }
  _isHidden() {
    const { duration } = this._media.$store;
    return !!this._error() || !this._canPlay() || !Number.isFinite(duration());
  }
  _onSrcChange() {
    this._src();
    this._canPlay.set(false);
    this._error.set(false);
  }
  _onCanPlay(event) {
    this._canPlay.set(true);
    this.dispatch("can-play", { trigger: event });
  }
  _onError(event) {
    this._error.set(true);
    this.dispatch("error", { trigger: event });
  }
  _onTimeUpdate() {
    const { duration } = this._media.$store;
    const { pointerRate } = this._slider;
    if (this._canPlay() && this._video && Number.isFinite(duration()) && Number.isFinite(pointerRate())) {
      this._video.currentTime = pointerRate() * duration();
    }
  }
  _setVideo(el) {
    this._video = el;
  }
};
SliderVideo.el = defineElement({
  tagName: "media-slider-video",
  props: { src: void 0 }
});

export { SliderVideo };
