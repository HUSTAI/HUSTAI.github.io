import { Thumbnail } from './chunk-ACCFVZCC.js';
import { formatTime, formatSpokenTime } from './chunk-JY53PGKC.js';
import { round } from './chunk-CVLY5S52.js';
import { renderRadioGroup } from './chunk-KRJ7Q224.js';
import { ClassManager } from './chunk-P3PWPLZT.js';
import { RadioGroup } from './chunk-P3YNMH2O.js';
import { Radio } from './chunk-4DGDZPR6.js';
import { MenuItems } from './chunk-QGM7SQHY.js';
import { isCueActive, onTrackChapterChange } from './chunk-NOPW2CG3.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_computed, $$_create_walker, $$_setup_custom_element, $$_insert_at_marker_lite, $$_create_template } from 'maverick.js/dom';
import { signal, effect, peek } from 'maverick.js';
import { defineElement } from 'maverick.js/element';
import { isKeyboardEvent, listenEvent, setStyle, isNumber } from 'maverick.js/std';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><media-thumbnail part="thumbnail" mk-d></media-thumbnail>`);
var $$_templ_2 = /* @__PURE__ */ $$_create_template(`<!$><div part="content"><div part="title"><!$></div><div part="start-time"><!$></div><div part="duration"><!$></div></div>`);
var ChaptersMenuItems = class extends MenuItems {
  constructor(instance) {
    super(instance);
    this.Z = signal(0);
    this.m = signal(null);
    this.a = useMedia();
  }
  onAttach(el) {
    super.onAttach(el);
    this.A.Yc({
      ad: this.ad.bind(this)
    });
    this.setAttributes({
      "data-thumbnails": this.Ae.bind(this)
    });
  }
  ad(trigger) {
    if (isKeyboardEvent(trigger))
      return;
    requestAnimationFrame(() => {
      const checked = this.el.querySelector('media-radio[aria-checked="true"]');
      checked.scrollIntoView({ block: "center" });
    });
  }
  onConnect(el) {
    effect(this.eb.bind(this));
    effect(this.wa.bind(this));
    this.oa();
    listenEvent(this.a.textTracks, "mode-change", this.oa.bind(this));
    const {
      chapterClass,
      thumbnailClass,
      contentClass,
      titleClass,
      startTimeClass,
      durationClass
    } = this.$props;
    new ClassManager(el).u('[part="chapter"]', chapterClass).u('[part="thumbnail"]', thumbnailClass).u('[part="content"]', contentClass).u('[part="title"]', titleClass).u('[part="start-time"]', startTimeClass).u('[part="duration"]', durationClass);
  }
  Ae() {
    const { thumbnailCues } = this.a.$store;
    return thumbnailCues().length > 0;
  }
  eb() {
    if (!this.A.I())
      return;
    const track = this.m(), { currentTime } = this.a.$store;
    if (!track) {
      this.Z.set(-1);
      return;
    }
    const time = currentTime(), activeCueIndex = track.cues.findIndex((cue) => isCueActive(cue, time));
    this.Z.set(activeCueIndex);
    if (activeCueIndex >= 0) {
      const cue = track.cues[activeCueIndex], radio = this.el.querySelector(`shadow-root media-radio[aria-checked='true']`), playedPercent = (time - cue.startTime) / (cue.endTime - cue.startTime) * 100;
      radio && setStyle(radio, "--played-percent", round(playedPercent, 3) + "%");
    }
  }
  wa() {
    this.A.ua(this.p());
  }
  p() {
    const track = this.m();
    return !track || !track.cues.length;
  }
  o(event) {
    if (this.p() || !event.trigger)
      return;
    const index = +event.target.value, cues = this.m()?.cues;
    if (isNumber(index) && cues?.[index]) {
      this.Z.set(index);
      this.a.remote.seek(cues[index].startTime, event);
    }
  }
  oa() {
    onTrackChapterChange(this.a.textTracks, peek(this.m), this.m.set);
  }
  $() {
    return this.Z() + "";
  }
  aa() {
    const track = this.m();
    if (!track)
      return [];
    return track.cues.map((cue, i) => ({
      value: i + "",
      content: () => [
        (() => {
          const $$_signal = $$_computed(
            () => this.Ae() && (() => {
              const [$$_root, $$_walker] = $$_create_walker($$_templ);
              $$_setup_custom_element($$_root, { time: cue.startTime });
              return $$_root;
            })()
          );
          $$_signal();
          return $$_signal;
        })(),
        (() => {
          const [$$_root, $$_walker] = $$_create_walker($$_templ_2), $$_expr = $$_walker.nextNode(), $$_expr_2 = $$_walker.nextNode(), $$_expr_3 = $$_walker.nextNode();
          $$_insert_at_marker_lite($$_expr, cue.text);
          $$_insert_at_marker_lite($$_expr_2, () => formatTime(cue.startTime, false, cue.startTime >= 3600));
          $$_insert_at_marker_lite($$_expr_3, () => formatSpokenTime(cue.endTime - cue.startTime));
          return $$_root;
        })()
      ]
    }));
  }
  render() {
    const { containerClass } = this.$props;
    return renderRadioGroup({
      part: "chapter",
      value: this.$.bind(this),
      options: this.aa.bind(this),
      radioGroupClass: containerClass,
      onChange: this.o.bind(this)
    });
  }
};
ChaptersMenuItems.el = defineElement({
  tagName: "media-chapters-menu-items",
  props: {
    containerClass: null,
    chapterClass: null,
    thumbnailClass: null,
    contentClass: null,
    titleClass: null,
    startTimeClass: null,
    durationClass: null
  }
});
ChaptersMenuItems.register = [Thumbnail, RadioGroup, Radio];

export { ChaptersMenuItems };
