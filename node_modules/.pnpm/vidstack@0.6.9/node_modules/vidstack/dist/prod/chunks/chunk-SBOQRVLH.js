import { renderRadioGroup } from './chunk-KRJ7Q224.js';
import { ClassManager } from './chunk-P3PWPLZT.js';
import { RadioGroup } from './chunk-P3YNMH2O.js';
import { Radio } from './chunk-4DGDZPR6.js';
import { MenuItems } from './chunk-QGM7SQHY.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_insert_at_marker_lite, $$_create_template } from 'maverick.js/dom';
import { effect } from 'maverick.js';
import { defineElement } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`);
var AudioMenuItems = class extends MenuItems {
  constructor(instance) {
    super(instance);
    this.a = useMedia();
  }
  onConnect(el) {
    effect(this.wa.bind(this));
    effect(this.xa.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el).u("media-radio", radioClass).u('[part="check"]', radioCheckClass);
  }
  xa() {
    const { emptyLabel } = this.$props, { audioTrack } = this.a.$store, track = audioTrack();
    this.A.kb.set(track?.label ?? emptyLabel());
  }
  wa() {
    this.A.ua(this.p());
  }
  p() {
    const { audioTracks } = this.a.$store;
    return audioTracks().length === 0;
  }
  o(event) {
    if (this.p())
      return;
    const radioGroup = event.target;
    const value = radioGroup.value, index = this.a.audioTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0)
      this.a.remote.changeAudioTrack(index, event);
  }
  $() {
    const { audioTrack } = this.a.$store;
    const track = audioTrack();
    return track ? track.label.toLowerCase() : "";
  }
  aa() {
    const { audioTracks } = this.a.$store;
    return audioTracks().map((track) => ({
      value: track.label.toLowerCase(),
      content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, track.label);
        return $$_root;
      })()
    }));
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this.$.bind(this),
      options: this.aa.bind(this),
      radioGroupClass,
      onChange: this.o.bind(this)
    });
  }
};
AudioMenuItems.el = defineElement({
  tagName: "media-audio-menu-items",
  props: {
    emptyLabel: "Default",
    radioClass: null,
    radioGroupClass: null,
    radioCheckClass: null
  }
});
AudioMenuItems.register = [RadioGroup, Radio];

export { AudioMenuItems };
