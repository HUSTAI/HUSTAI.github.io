import { isTrackCaptionKind } from './chunk-PXCLVUYU.js';
import { $ariaBool } from './chunk-EVP5E6AO.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { effect, peek } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';
import { listenEvent, createDisposalBin } from 'maverick.js/std';
import { CaptionsRenderer, renderVTTCueString, updateTimedVTTCueNodes } from 'media-captions';

var CaptionsTextRenderer = class {
  constructor(_renderer) {
    this.N = _renderer;
    this.priority = 10;
    this.m = null;
    this.ba = createDisposalBin();
  }
  attach() {
  }
  canRender() {
    return true;
  }
  detach() {
    this.ba.empty();
    this.N.reset();
    this.m = null;
  }
  changeTrack(track) {
    if (!track || this.m === track)
      return;
    this.ba.empty();
    if (track.readyState < 2) {
      this.N.reset();
      this.ba.add(
        listenEvent(track, "load", () => this.De(track), { once: true })
      );
    } else {
      this.De(track);
    }
    this.ba.add(
      listenEvent(track, "add-cue", (event) => {
        this.N.addCue(event.detail);
      }),
      listenEvent(track, "remove-cue", (event) => {
        this.N.removeCue(event.detail);
      })
    );
    this.m = track;
  }
  De(track) {
    this.N.changeTrack({
      cues: [...track.cues],
      regions: [...track.regions]
    });
  }
};

// src/player/ui/captions/captions.tsx
var Captions = class extends Component {
  onAttach() {
    this.a = useMedia();
    this.setAttributes({
      "aria-hidden": $ariaBool(this.z.bind(this))
    });
  }
  onConnect(el) {
    this.N = new CaptionsRenderer(el);
    this.za = new CaptionsTextRenderer(this.N);
    effect(this.ai.bind(this));
  }
  onDisconnect() {
    if (this.za) {
      this.za.detach();
      this.a.textRenderers.remove(this.za);
    }
    this.N?.destroy();
  }
  z() {
    const { textTrack } = this.a.$store, track = textTrack();
    return !track || !isTrackCaptionKind(track);
  }
  ai() {
    const { viewType } = this.a.$store;
    if (viewType() === "audio") {
      return this.bi();
    } else {
      return this.ci();
    }
  }
  bi() {
    effect(this.Pc.bind(this));
    return () => {
      this.el.textContent = "";
    };
  }
  Pc() {
    if (this.z())
      return;
    const { textTrack } = this.a.$store;
    listenEvent(textTrack(), "cue-change", this.di.bind(this));
    effect(this.ei.bind(this));
  }
  di() {
    this.el.textContent = "";
    const { currentTime, textTrack } = this.a.$store, time = peek(currentTime), activeCues = peek(textTrack).activeCues;
    for (const cue of activeCues) {
      const cueEl = document.createElement("div");
      cueEl.setAttribute("part", "cue");
      cueEl.innerHTML = renderVTTCueString(cue, time);
      this.el.append(cueEl);
    }
  }
  ei() {
    const { currentTime } = this.a.$store;
    updateTimedVTTCueNodes(this.el, currentTime());
  }
  ci() {
    effect(this.fi.bind(this));
    effect(this.gi.bind(this));
    this.a.textRenderers.add(this.za);
    return () => {
      this.el.textContent = "";
      this.za.detach();
      this.a.textRenderers.remove(this.za);
    };
  }
  fi() {
    this.N.dir = this.$props.textDir();
  }
  gi() {
    if (this.z())
      return;
    const { currentTime } = this.a.$store;
    this.N.currentTime = currentTime();
  }
};
Captions.el = defineElement({
  tagName: "media-captions",
  props: { textDir: "ltr" }
});

export { Captions };
