import { signal, effect, onDispose, peek } from 'maverick.js';
import { animationFrameThrottle, isDOMElement, setAttribute } from 'maverick.js/std';

// src/foundation/observers/class-manager.ts
var ClassManager = class {
  constructor(el) {
    this.Gb = /* @__PURE__ */ new Map();
    this.Kc = signal([]);
    this.Lc = animationFrameThrottle(this.V.bind(this));
    this.Ic = el.firstChild;
    this.Jc = new MutationObserver(this.Bb.bind(this));
    this.Jc.observe(this.Ic, { subtree: true, childList: true });
    effect(this.gh.bind(this));
    onDispose(this._b.bind(this));
  }
  Bb(records) {
    const selector = Array.from(this.Gb.keys()).join(",");
    for (const record of records) {
      for (const node of record.addedNodes) {
        if (isDOMElement(node) && node.matches(selector))
          this.Lc();
      }
    }
  }
  u(selector, $class) {
    this.Gb.set(selector, $class);
    this.Kc.set((c) => [...c, $class]);
    return this;
  }
  V() {
    for (const [selector, classes] of this.Gb) {
      const _class = peek(classes);
      for (const el of this.Ic.querySelectorAll(selector)) {
        setAttribute(el, "class", _class);
      }
    }
  }
  gh() {
    for (const c of this.Kc())
      c();
    this.Lc();
  }
  _b() {
    this.Kc.set([]);
    this.Gb.clear();
    this.Jc.disconnect();
  }
};

export { ClassManager };
