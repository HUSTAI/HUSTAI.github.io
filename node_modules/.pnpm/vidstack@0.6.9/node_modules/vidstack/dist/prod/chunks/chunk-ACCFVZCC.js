import { findActiveCue } from './chunk-NOPW2CG3.js';
import { $ariaBool } from './chunk-EVP5E6AO.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_effect, $$_attr, $$_listen, $$_ref, $$_create_template } from 'maverick.js/dom';
import { signal, effect, peek } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';
import { animationFrameThrottle } from 'maverick.js/std';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><img part="img" loading="eager" decoding="async" aria-hidden="true" />`);
var Thumbnail = class extends Component {
  constructor(instance) {
    super(instance);
    this.sa = null;
    this.Eb = null;
    this.Bc = [];
    this.fa = signal("");
    this.Cc = signal(false);
    this.Dc = signal(null);
    this.he = animationFrameThrottle(this.bh.bind(this));
    this.a = useMedia();
  }
  onAttach() {
    this.setAttributes({
      "data-loading": this.Ec.bind(this),
      "aria-hidden": $ariaBool(this.z.bind(this))
    });
  }
  onConnect() {
    effect(this.ka.bind(this));
    effect(this.Yg.bind(this));
    effect(this.Zg.bind(this));
  }
  ka() {
    this.fa();
    this.a.$store.thumbnails();
    this.Cc.set(false);
  }
  $b() {
    this.Cc.set(true);
    this.he();
  }
  Ec() {
    return !this.z() && !this.Cc();
  }
  z() {
    const { duration, thumbnailCues } = this.a.$store;
    return !Number.isFinite(duration()) || thumbnailCues().length === 0;
  }
  Yg() {
    const { time } = this.$props, { duration, thumbnailCues } = this.a.$store, _cues = thumbnailCues(), _time = time();
    if (!_cues || !Number.isFinite(duration())) {
      this.Dc.set(null);
      return;
    }
    this.Dc.set(findActiveCue(_time, _cues));
  }
  _g(el) {
    this.sa = el;
  }
  Zg() {
    const activeCue = this.Dc(), thumbnails = peek(this.a.$store.thumbnails);
    if (!thumbnails || !activeCue) {
      this.fa.set("");
      this.ie();
      return;
    }
    const [_src, _coords = ""] = (activeCue.text || "").split("#");
    this.Eb = this.$g(_coords);
    if (!this.Eb) {
      this.ie();
      return;
    }
    this.fa.set(this.ah(thumbnails, _src));
    this.he();
  }
  ah(baseURL, src) {
    return !/https?:/.test(src) ? `${baseURL.split("/").slice(0, -1).join("/")}${src.replace(/^\/?/, "/")}`.replace(
      /^\/\//,
      "/"
    ) : src;
  }
  $g(coords) {
    const [props, values] = coords.split("="), resolvedCoords = {}, coordValues = values?.split(",");
    if (!props || !values)
      return null;
    for (let i = 0; i < props.length; i++)
      resolvedCoords[props[i]] = +coordValues[i];
    return resolvedCoords;
  }
  bh() {
    if (!this.sa || !this.Eb || !this.el)
      return;
    const { w, h, x, y } = this.Eb, { maxWidth, maxHeight, minWidth, minHeight } = getComputedStyle(this.el), minRatio = Math.max(parseInt(minWidth) / w, parseInt(minHeight) / h), maxRatio = Math.min(parseInt(maxWidth) / w, parseInt(maxHeight) / h), scale = maxRatio < 1 ? maxRatio : minRatio > 1 ? minRatio : 1;
    this.fb(this.el, "--thumbnail-width", `${w * scale}px`);
    this.fb(this.el, "--thumbnail-height", `${h * scale}px`);
    this.fb(this.sa, "width", `${this.sa.naturalWidth * scale}px`);
    this.fb(this.sa, "height", `${this.sa.naturalHeight * scale}px`);
    this.fb(this.sa, "transform", `translate(-${x * scale}px, -${y * scale}px)`);
  }
  fb(el, name, value) {
    el.style.setProperty(name, value);
    this.Bc.push(() => el.style.removeProperty(name));
  }
  ie() {
    for (const reset of this.Bc)
      reset();
    this.Bc = [];
  }
  render() {
    const { crossorigin } = this.a.$store;
    return (() => {
      const [$$_root, $$_walker] = $$_create_walker($$_templ);
      $$_effect(() => $$_attr($$_root, "src", this.fa()));
      $$_effect(() => $$_attr($$_root, "crossorigin", crossorigin()));
      $$_listen($$_root, "load", this.$b.bind(this));
      $$_ref($$_root, this._g.bind(this));
      return $$_root;
    })();
  }
};
Thumbnail.el = defineElement({
  tagName: "media-thumbnail",
  props: { time: 0 }
});

export { Thumbnail };
