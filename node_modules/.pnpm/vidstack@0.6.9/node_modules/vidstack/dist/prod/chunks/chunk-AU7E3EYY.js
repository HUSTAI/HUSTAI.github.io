import { scopedRaf } from './chunk-HQQTSFXD.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { effect, peek } from 'maverick.js';
import { defineElement, Component } from 'maverick.js/element';
import { listenEvent, isPointerEvent, isMouseEvent, isTouchEvent, kebabToCamelCase } from 'maverick.js/std';

var Gesture = class extends Component {
  constructor() {
    super(...arguments);
    this.Ma = null;
    this.ya = 0;
    this.Be = -1;
  }
  onAttach() {
    const { event, action } = this.$props;
    this.setAttributes({
      event,
      action
    });
  }
  onConnect() {
    this.a = useMedia();
    scopedRaf(() => {
      this.Ma = this.a.player.querySelector("media-outlet");
      effect(this.Wh.bind(this));
    });
  }
  Wh() {
    let eventType = this.$props.event();
    if (!this.Ma || !eventType)
      return;
    if (/^dbl/.test(eventType)) {
      eventType = eventType.split(/^dbl/)[1];
    }
    listenEvent(this.Ma, eventType, this.Xh.bind(this));
  }
  Xh(event) {
    if (!this.Yh(event) || isPointerEvent(event) && (event.button !== 0 || this.a.activeMenu)) {
      return;
    }
    event.MEDIA_GESTURE = true;
    event.preventDefault();
    const isDblEvent = peek(this.$props.event)?.startsWith("dbl");
    if (!isDblEvent) {
      if (this.ya === 0) {
        setTimeout(() => {
          if (this.ya === 1)
            this.Ce(event);
        }, 250);
      }
    } else if (this.ya === 1) {
      queueMicrotask(() => this.Ce(event));
      clearTimeout(this.Be);
      this.ya = 0;
      return;
    }
    if (this.ya === 0) {
      this.Be = window.setTimeout(() => {
        this.ya = 0;
      }, 275);
    }
    this.ya++;
  }
  Ce(event) {
    this.el.setAttribute("data-triggered", "");
    requestAnimationFrame(() => {
      if (this.Zh()) {
        this._h(peek(this.$props.action), event);
      }
      requestAnimationFrame(() => {
        this.el.removeAttribute("data-triggered");
      });
    });
  }
  /** Validate event occurred in gesture bounds. */
  Yh(event) {
    if (!this.el)
      return false;
    if (isPointerEvent(event) || isMouseEvent(event) || isTouchEvent(event)) {
      const touch = isTouchEvent(event) ? event.touches[0] : void 0;
      const clientX = touch?.clientX ?? event.clientX;
      const clientY = touch?.clientY ?? event.clientY;
      const rect = this.el.getBoundingClientRect();
      const inBounds = clientY >= rect.top && clientY <= rect.bottom && clientX >= rect.left && clientX <= rect.right;
      return event.type.includes("leave") ? !inBounds : inBounds;
    }
    return true;
  }
  /** Validate gesture has the highest z-index in this triggered group. */
  Zh() {
    const gestures = this.a.player.querySelectorAll(
      "media-gesture[data-triggered]"
    );
    return Array.from(gestures).sort(
      (a, b) => +getComputedStyle(b).zIndex - +getComputedStyle(a).zIndex
    )[0]?.component === this;
  }
  _h(action, trigger) {
    if (!action)
      return;
    const [method, value] = action.replace(/:([a-z])/, "-$1").split(":");
    if (action.includes(":fullscreen")) {
      this.a.remote.toggleFullscreen("prefer-media", trigger);
    } else if (action.includes("seek:")) {
      this.a.remote.seek(peek(this.a.$store.currentTime) + (+value || 0), trigger);
    } else {
      this.a.remote[kebabToCamelCase(method)](trigger);
    }
  }
};
Gesture.el = defineElement({
  tagName: "media-gesture",
  props: {
    event: void 0,
    action: void 0
  }
});

export { Gesture };
