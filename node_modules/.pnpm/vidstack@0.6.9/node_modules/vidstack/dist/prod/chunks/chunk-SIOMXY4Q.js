import { round } from './chunk-CVLY5S52.js';
import { renderRadioGroup } from './chunk-KRJ7Q224.js';
import { ClassManager } from './chunk-P3PWPLZT.js';
import { RadioGroup } from './chunk-P3YNMH2O.js';
import { Radio } from './chunk-4DGDZPR6.js';
import { MenuItems } from './chunk-QGM7SQHY.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_insert_at_marker_lite, $$_computed, $$_create_template } from 'maverick.js/dom';
import { computed, effect, peek } from 'maverick.js';
import { defineElement } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><span><!$></span>`);
var $$_templ_2 = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`);
var $$_templ_3 = /* @__PURE__ */ $$_create_template(`<!$><span part="info"><!$></span>`);
var QualityMenuItems = class extends MenuItems {
  constructor(instance) {
    super(instance);
    this.Vh = computed(() => {
      const { qualities } = this.a.$store;
      return [...qualities()].sort(
        (a, b) => b.height === a.height ? b.bitrate - a.bitrate : b.height - a.height
      );
    });
    this.a = useMedia();
  }
  onConnect(el) {
    effect(this.wa.bind(this));
    effect(this.xa.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el).u("media-radio", radioClass).u('[part="check"]', radioCheckClass);
  }
  xa() {
    const { autoLabel } = this.$props, { autoQuality, quality } = this.a.$store, qualityText = quality() ? quality().height + "p" : "";
    this.A.kb.set(!autoQuality() ? qualityText : autoLabel() + ` (${qualityText})`);
  }
  wa() {
    const { qualities } = this.a.$store;
    this.A.ua(qualities().length === 0);
  }
  p() {
    const { canSetQuality, qualities } = this.a.$store;
    return !canSetQuality() || qualities().length === 0;
  }
  o(event) {
    if (this.p())
      return;
    const radioGroup = event.target, value = radioGroup.value;
    if (value === "auto") {
      this.a.remote.changeQuality(-1, event);
      return;
    }
    const { qualities } = this.a.$store, index = peek(qualities).findIndex((quality) => this.bd(quality) === value);
    if (index >= 0)
      this.a.remote.changeQuality(index, event);
  }
  $() {
    const { quality, autoQuality } = this.a.$store;
    if (autoQuality())
      return "auto";
    const currentQuality = quality();
    return currentQuality ? this.bd(currentQuality) : "auto";
  }
  bd(quality) {
    return quality.height + "_" + quality.bitrate;
  }
  aa() {
    const { autoLabel, hideBitrate } = this.$props;
    return [
      { value: "auto", content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, autoLabel);
        return $$_root;
      })() },
      ...this.Vh().map((quality) => {
        const rate = `${round(quality.bitrate / 1e6, 2)} Mbps`;
        return {
          value: this.bd(quality),
          content: () => [
            (() => {
              const [$$_root, $$_walker] = $$_create_walker($$_templ_2), $$_expr = $$_walker.nextNode();
              $$_insert_at_marker_lite($$_expr, quality.height + "p");
              return $$_root;
            })(),
            (() => {
              const $$_signal = $$_computed(
                () => !hideBitrate() && (() => {
                  const [$$_root, $$_walker] = $$_create_walker($$_templ_3), $$_expr = $$_walker.nextNode();
                  $$_insert_at_marker_lite($$_expr, rate);
                  return $$_root;
                })()
              );
              $$_signal();
              return $$_signal;
            })()
          ]
        };
      })
    ];
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this.$.bind(this),
      options: this.aa.bind(this),
      radioGroupClass,
      onChange: this.o.bind(this)
    });
  }
};
QualityMenuItems.el = defineElement({
  tagName: "media-quality-menu-items",
  props: {
    autoLabel: "Auto",
    hideBitrate: false,
    radioGroupClass: null,
    radioClass: null,
    radioCheckClass: null
  }
});
QualityMenuItems.register = [RadioGroup, Radio];

export { QualityMenuItems };
