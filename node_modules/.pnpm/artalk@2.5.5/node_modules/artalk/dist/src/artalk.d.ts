import type ArtalkConfig from '../types/artalk-config';
import type { EventPayloadMap, Handler } from '../types/event';
import type ArtalkPlug from '../types/plug';
import type Context from '../types/context';
import ListLite from './list/list-lite';
/**
 * Artalk
 *
 * @see https://artalk.js.org
 */
export default class Artalk {
    private static instance?;
    static ListLite: typeof ListLite;
    static readonly defaults: ArtalkConfig;
    conf: ArtalkConfig;
    ctx: Context;
    $root: HTMLElement;
    /** Plugins */
    protected static plugins: ArtalkPlug[];
    static DisabledComponents: string[];
    constructor(conf: Partial<ArtalkConfig>);
    /** Init Artalk */
    static init(conf: Partial<ArtalkConfig>): Artalk;
    /** Use Plugin (plugin will be called in instance `use` func) */
    use(plugin: ArtalkPlug): void;
    /** Update config of Artalk */
    update(conf: Partial<ArtalkConfig>): Artalk;
    /** Reload comment list of Artalk */
    reload(): void;
    /** Destroy instance of Artalk */
    destroy(): void;
    /** Add an event listener */
    on<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>): void;
    /** Remove an event listener */
    off<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>): void;
    /** Trigger an event */
    trigger<K extends keyof EventPayloadMap>(name: K, payload?: EventPayloadMap[K]): void;
    /** Set dark mode */
    setDarkMode(darkMode: boolean): void;
    /** Use Plugin (static method) */
    static use(plugin: ArtalkPlug): void;
    /** Update config of Artalk */
    static update(conf: Partial<ArtalkConfig>): Artalk | undefined;
    /** Reload comment list of Artalk */
    static reload(): void;
    /** Destroy instance of Artalk */
    static destroy(): void;
    /** Add an event listener */
    static on<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>): void;
    /** Remove an event listener */
    static off<K extends keyof EventPayloadMap>(name: K, handler: Handler<EventPayloadMap[K]>): void;
    /** Trigger an event */
    static trigger<K extends keyof EventPayloadMap>(name: K, payload?: EventPayloadMap[K]): void;
    /** Set dark mode */
    static setDarkMode(darkMode: boolean): void;
    /** Load count widget */
    static loadCountWidget(conf: Partial<ArtalkConfig>): void;
    /** @deprecated Please use `loadCountWidget` instead */
    static LoadCountWidget(conf: Partial<ArtalkConfig>): void;
}
