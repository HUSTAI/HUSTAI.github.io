import Context from '../types/context';
import CheckerLauncher from './lib/checker';
import Api from './api';
import Editor from './editor';
import SidebarLayer from './layer/sidebar-layer';
import ListLite from './list/list-lite';
/**
 * Services
 *
 * @description
 * 当函数有返回值时，该值将自动添加到 Context 类作为一个 private 成员的值，
 * 这个成员的名称与函数名对应。可在 Context 类中访问该对象（同事类）。
 */
declare const services: {
    i18n(ctx: Context): void;
    markdown(): void;
    user(ctx: Context): {
        ctx?: Context | undefined;
        data: import("../types/artalk-config").LocalUser;
        setContext(ctx: Context): void;
        update(obj?: Partial<import("../types/artalk-config").LocalUser>): void;
        logout(): void;
        checkHasBasicUserInfo(): boolean;
    };
    api(ctx: Context): Api;
    checkerLauncher(ctx: Context): CheckerLauncher;
    editor(ctx: Context): Editor;
    list(ctx: Context): ListLite | undefined;
    layer(ctx: Context): void;
    sidebarLayer(ctx: Context): SidebarLayer;
    eventsDefault(ctx: Context): void;
    darkMode(ctx: Context): void;
};
export default services;
type TServiceImps = typeof services;
type TObjectWithFuncs = {
    [k: string]: (...args: any) => any;
};
type TKeysOnlyReturn<T extends TObjectWithFuncs, V> = {
    [K in keyof T]: ReturnType<T[K]> extends V ? K : never;
}[keyof T];
type TOmitConditions = TKeysOnlyReturn<TServiceImps, void>;
type TServiceInjectors = Omit<TServiceImps, TOmitConditions>;
export type TInjectedServices = {
    [K in keyof TServiceInjectors]: ReturnType<TServiceInjectors[K]>;
};
