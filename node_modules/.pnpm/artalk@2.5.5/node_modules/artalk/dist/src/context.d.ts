import type ArtalkConfig from '../types/artalk-config';
import type { CommentData, NotifyData } from '../types/artalk-data';
import type ContextApi from '../types/context';
import type { TInjectedServices } from './service';
import { CheckerCaptchaPayload, CheckerPayload } from './lib/checker';
import * as I18n from './i18n';
import { SidebarShowPayload } from './layer/sidebar-layer';
import Comment from './comment';
import Api from './api';
interface Context extends TInjectedServices {
}
/**
 * Artalk Context
 */
declare class Context implements ContextApi {
    conf: ArtalkConfig;
    $root: HTMLElement;
    markedReplacers: ((raw: string) => string)[];
    private commentList;
    private eventList;
    constructor(conf: ArtalkConfig, $root?: HTMLElement);
    inject(depName: string, obj: any): void;
    get(depName: string): any;
    getApi(): Api;
    getCommentList(): Comment[];
    getCommentDataList(): CommentData[];
    findComment(id: number): Comment | undefined;
    deleteComment(_comment: number | Comment): void;
    clearAllComments(): void;
    insertComment(commentData: CommentData): void;
    updateComment(commentData: CommentData): void;
    replyComment(commentData: CommentData, $comment: HTMLElement, scroll?: boolean): void;
    cancelReplyComment(): void;
    editComment(commentData: CommentData, $comment: HTMLElement): void;
    cancelEditComment(): void;
    updateNotifies(notifies: NotifyData[]): void;
    listReload(): void;
    reload(): void;
    listRefreshUI(): void;
    listHashGotoCheck(): void;
    editorOpen(): void;
    editorClose(): void;
    editorShowLoading(): void;
    editorHideLoading(): void;
    editorShowNotify(msg: any, type: any): void;
    editorTravel($el: HTMLElement): void;
    editorTravelBack(): void;
    showSidebar(payload?: SidebarShowPayload): void;
    hideSidebar(): void;
    checkAdmin(payload: CheckerPayload): void;
    checkCaptcha(payload: CheckerCaptchaPayload): void;
    checkAdminShowEl(): void;
    on(name: any, handler: any, scope?: any): void;
    off(name: any, handler: any, scope?: any): void;
    trigger(name: any, payload?: any, scope?: any): void;
    $t(key: I18n.I18nKeys, args?: {
        [key: string]: string;
    }): string;
    setDarkMode(darkMode: boolean): void;
    updateConf(nConf: Partial<ArtalkConfig>): void;
    getMarkedInstance(): typeof import("marked").marked | undefined;
}
export default Context;
