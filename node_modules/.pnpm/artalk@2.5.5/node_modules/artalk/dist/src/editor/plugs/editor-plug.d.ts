import Editor from '../editor';
/**
 * Editor 插件
 *
 * @desc 使用 Interface x Abstract 合并声明
 * @see https://www.typescriptlang.org/docs/handbook/declaration-merging.html#merging-interfaces
 */
interface EditorPlug {
    onPanelShow?(): void;
    onPanelHide?(): void;
}
declare abstract class EditorPlug {
    protected editor: Editor;
    protected get ctx(): import("../../../types/context").default;
    protected $panel?: HTMLElement;
    protected $btn?: HTMLElement;
    onHeaderInput?: (key: string, $input: HTMLElement) => void;
    contentTransformer?: (rawContent: string) => string;
    onContentUpdated?: (content: string) => void;
    constructor(editor: Editor);
    /** Name of plug */
    static Name: string;
    /** Register plug panel will provide a plug el */
    protected registerPanel(html?: string): HTMLElement;
    /** Register plug btn will add a btn on the bottom of editor */
    protected registerBtn(html: string): HTMLElement;
    /** Register the event of header input is changed */
    protected registerHeaderInputEvt(func: (key: string, $input: HTMLElement) => void): void;
    /** Register the content transformer to handle the content of the last submit by the editor */
    protected registerContentTransformer(func: (raw: string) => string): void;
    /** Register the event of editor content is updated */
    protected registerContentUpdatedEvt(func: (content: string) => void): void;
    /** Get panel element of plug */
    getPanel(): HTMLElement | undefined;
    /** Get btn element of plug */
    getBtn(): HTMLElement | undefined;
}
export default EditorPlug;
