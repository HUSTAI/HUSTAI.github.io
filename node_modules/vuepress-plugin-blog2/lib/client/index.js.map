{"version":3,"file":"index.js","sources":["../../src/client/composables/useBlogCategory.ts","../../src/client/composables/useBlogType.ts"],"sourcesContent":["import {\n  usePageData,\n  usePageFrontmatter,\n  useRouteLocale,\n} from \"@vuepress/client\";\nimport type { ComputedRef } from \"vue\";\nimport { computed, ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { resolveRouteWithRedirect } from \"vuepress-shared/client\";\n\nimport { categoryMap } from \"@temp/blog/category\";\n\nimport type {\n  BlogCategoryFrontmatterOptions,\n  CategoryMap,\n} from \"../../shared/index.js\";\nimport type { BlogCategoryData } from \"../typings.js\";\n\n// eslint-disable-next-line\ndeclare const __VUE_HMR_RUNTIME__: Record<string, any>;\ndeclare const __VUEPRESS_DEV__: boolean;\ndeclare const BLOG_META_SCOPE: string;\n\nexport const blogCategoryMap = ref(categoryMap);\n\nexport const useBlogCategory = <\n  T extends Record<string, unknown> = Record<string, unknown>\n>(\n  key = \"\"\n): ComputedRef<BlogCategoryData<T>> => {\n  const page = usePageData();\n  const router = useRouter();\n  const routeLocale = useRouteLocale();\n\n  return computed(() => {\n    const mapKey =\n      key ||\n      usePageFrontmatter<{ blog?: BlogCategoryFrontmatterOptions }>().value.blog\n        ?.key ||\n      \"\";\n\n    if (!mapKey) {\n      console.warn(`useBlogCategory: key not found`);\n\n      // fallback data\n      return { path: \"/\", map: {} };\n    }\n\n    const routes = router.getRoutes();\n\n    if (!blogCategoryMap.value[mapKey])\n      throw new Error(`useBlogCategory: key ${mapKey} is invalid`);\n\n    const currentMap = blogCategoryMap.value[mapKey][routeLocale.value];\n    const result: BlogCategoryData<T> = {\n      path: currentMap.path,\n      map: {},\n    };\n\n    for (const category in currentMap.map) {\n      const categoryMap = currentMap.map[category];\n\n      result.map[category] = { path: categoryMap.path, items: [] };\n\n      for (const pageKey of categoryMap.keys) {\n        const route = routes.find(({ name }) => name === pageKey);\n\n        if (route) {\n          const finalRoute = resolveRouteWithRedirect(router, route.path);\n\n          result.map[category].items.push({\n            path: finalRoute.path,\n            info:\n              BLOG_META_SCOPE === \"\"\n                ? <T>finalRoute.meta\n                : <T>finalRoute.meta[BLOG_META_SCOPE],\n          });\n        }\n      }\n\n      if (page.value.path === categoryMap.path)\n        result.currentItems = result.map[category].items;\n    }\n\n    return result;\n  });\n};\n\n// @ts-ignore\nif (__VUEPRESS_DEV__ && (import.meta.webpackHot || import.meta.hot))\n  __VUE_HMR_RUNTIME__[\"updateBlogCategory\"] = (\n    map: Record<string, CategoryMap>\n  ): void => {\n    blogCategoryMap.value = map;\n  };\n","import { usePageFrontmatter, useRouteLocale } from \"@vuepress/client\";\nimport type { ComputedRef } from \"vue\";\nimport { computed, ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { resolveRouteWithRedirect } from \"vuepress-shared/client\";\n\nimport { typeMap } from \"@temp/blog/type\";\n\nimport type {\n  BlogTypeFrontmatterOptions,\n  TypeMap,\n} from \"../../shared/index.js\";\nimport type { BlogTypeData } from \"../typings.js\";\n\ndeclare const __VUE_HMR_RUNTIME__: Record<string, unknown>;\ndeclare const __VUEPRESS_DEV__: boolean;\ndeclare const BLOG_META_SCOPE: string;\n\nexport const blogTypeMap = ref(typeMap);\n\nexport const useBlogType = <\n  T extends Record<string, unknown> = Record<string, unknown>\n>(\n  key = \"\"\n): ComputedRef<BlogTypeData<T>> => {\n  const router = useRouter();\n  const routeLocale = useRouteLocale();\n\n  return computed(() => {\n    const mapKey =\n      key ||\n      usePageFrontmatter<{ blog?: BlogTypeFrontmatterOptions }>().value.blog\n        ?.key ||\n      \"\";\n\n    if (!mapKey) {\n      console.warn(`useBlogType: key not found`);\n\n      // fallback data\n      return { path: \"/\", items: [] };\n    }\n\n    if (!blogTypeMap.value[mapKey])\n      throw new Error(`useBlogType: key ${key} is invalid`);\n\n    const routes = router.getRoutes();\n    const configMap = blogTypeMap.value[mapKey][routeLocale.value];\n    const result: BlogTypeData<T> = {\n      path: configMap.path,\n      items: [],\n    };\n\n    for (const pageKey of configMap.keys) {\n      const route = routes.find(({ name }) => name === pageKey);\n\n      if (route) {\n        const finalRoute = resolveRouteWithRedirect(router, route.path);\n\n        result.items.push({\n          path: finalRoute.path,\n          info:\n            BLOG_META_SCOPE === \"\"\n              ? <T>finalRoute.meta\n              : <T>finalRoute.meta[BLOG_META_SCOPE],\n        });\n      }\n    }\n\n    return result;\n  });\n};\n\n// @ts-ignore\nif (__VUEPRESS_DEV__ && (import.meta.webpackHot || import.meta.hot))\n  __VUE_HMR_RUNTIME__[\"updateBlogType\"] = (\n    map: Record<string, TypeMap>\n  ): void => {\n    blogTypeMap.value = map;\n  };\n"],"names":["blogCategoryMap","ref","categoryMap","useBlogCategory","key","page","usePageData","router","useRouter","routeLocale","useRouteLocale","computed","_a","mapKey","usePageFrontmatter","routes","currentMap","result","category","pageKey","route","name","finalRoute","resolveRouteWithRedirect","map","blogTypeMap","typeMap","useBlogType","configMap"],"mappings":"wUAuBa,MAAAA,EAAkBC,EAAIC,CAAW,EAEjCC,EAAkB,CAG7BC,EAAM,KAC+B,CACrC,MAAMC,EAAOC,IACPC,EAASC,EAAU,EACnBC,EAAcC,EAAAA,EAEpB,OAAOC,EAAS,IAAM,CAlCxB,IAAAC,EAmCI,MAAMC,EACJT,KACAQ,EAAAE,EAA8D,EAAE,MAAM,OAAtE,KAAA,OAAAF,EACI,MACJ,GAEF,GAAI,CAACC,EACH,OAAA,QAAQ,KAAK,gCAAgC,EAGtC,CAAE,KAAM,IAAK,IAAK,CAAG,CAAA,EAG9B,MAAME,EAASR,EAAO,UAAA,EAEtB,GAAI,CAACP,EAAgB,MAAMa,CAAM,EAC/B,MAAM,IAAI,MAAM,wBAAwBA,cAAmB,EAE7D,MAAMG,EAAahB,EAAgB,MAAMa,CAAM,EAAEJ,EAAY,KAAK,EAC5DQ,EAA8B,CAClC,KAAMD,EAAW,KACjB,IAAK,CACP,CAAA,EAEA,UAAWE,KAAYF,EAAW,IAAK,CACrC,MAAMd,EAAcc,EAAW,IAAIE,CAAQ,EAE3CD,EAAO,IAAIC,CAAQ,EAAI,CAAE,KAAMhB,EAAY,KAAM,MAAO,CAAG,CAAA,EAE3D,UAAWiB,KAAWjB,EAAY,KAAM,CACtC,MAAMkB,EAAQL,EAAO,KAAK,CAAC,CAAE,KAAAM,CAAK,IAAMA,IAASF,CAAO,EAExD,GAAIC,EAAO,CACT,MAAME,EAAaC,EAAyBhB,EAAQa,EAAM,IAAI,EAE9DH,EAAO,IAAIC,CAAQ,EAAE,MAAM,KAAK,CAC9B,KAAMI,EAAW,KACjB,KACE,kBAAoB,GACbA,EAAW,KACXA,EAAW,KAAK,eAAe,CAC1C,CAAC,GAIDjB,EAAK,MAAM,OAASH,EAAY,OAClCe,EAAO,aAAeA,EAAO,IAAIC,CAAQ,EAAE,OAG/C,OAAOD,CACT,CAAC,CACH,EAGI,mBAAqB,YAAY,YAAc,YAAY,OAC7D,oBAAoB,mBAClBO,GACS,CACTxB,EAAgB,MAAQwB,CAC1B,GC5EK,MAAMC,EAAcxB,EAAIyB,CAAO,EAEzBC,EAAc,CAGzBvB,EAAM,KAC2B,CACjC,MAAMG,EAASC,EAAU,EACnBC,EAAcC,EAAe,EAEnC,OAAOC,EAAS,IAAM,CA5BxB,IAAAC,EA6BI,MAAMC,EACJT,KACAQ,EAAAE,EAA0D,EAAE,MAAM,OAAlE,KAAA,OAAAF,EACI,MACJ,GAEF,GAAI,CAACC,EACH,OAAQ,QAAA,KAAK,4BAA4B,EAGlC,CAAE,KAAM,IAAK,MAAO,CAAA,CAAG,EAGhC,GAAI,CAACY,EAAY,MAAMZ,CAAM,EAC3B,MAAM,IAAI,MAAM,oBAAoBT,cAAgB,EAEtD,MAAMW,EAASR,EAAO,UAChBqB,EAAAA,EAAYH,EAAY,MAAMZ,CAAM,EAAEJ,EAAY,KAAK,EACvDQ,EAA0B,CAC9B,KAAMW,EAAU,KAChB,MAAO,CAAA,CACT,EAEA,UAAWT,KAAWS,EAAU,KAAM,CACpC,MAAMR,EAAQL,EAAO,KAAK,CAAC,CAAE,KAAAM,CAAK,IAAMA,IAASF,CAAO,EAExD,GAAIC,EAAO,CACT,MAAME,EAAaC,EAAyBhB,EAAQa,EAAM,IAAI,EAE9DH,EAAO,MAAM,KAAK,CAChB,KAAMK,EAAW,KACjB,KACE,kBAAoB,GACbA,EAAW,KACXA,EAAW,KAAK,eAAe,CAC1C,CAAC,GAIL,OAAOL,CACT,CAAC,CACH,EAGI,mBAAqB,YAAY,YAAc,YAAY,OAC7D,oBAAoB,eAClBO,GACS,CACTC,EAAY,MAAQD,CACtB"}