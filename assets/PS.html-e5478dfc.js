import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as d,c as i,a as e,b as t,d as n,e as l,f as c}from"./app-009280c5.js";const p="/assets/images/prompt/PS1.png",h="/assets/images/prompt/PS2.png",g="/assets/images/prompt/PS3.png",m="/assets/images/prompt/PS4.png",u="/assets/images/prompt/PS5.png",f={},_=e("h1",{id:"plan-and-solve-prompting-先计划再求解",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#plan-and-solve-prompting-先计划再求解","aria-hidden":"true"},"#"),t(" Plan-and-Solve Prompting: 先计划再求解")],-1),b={href:"https://mp.weixin.qq.com/s/caLLfS0O7S7fbansOr-GVw",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"Plan-and-Solve Prompting: 先计划再求解",-1),S=e("code",null,"Plan",-1),P=e("code",null,"Solve",-1),y=e("code",null,"CoT",-1),L={class:"hint-container tip"},x=e("p",{class:"hint-container-title"},"提示",-1),T={href:"https://github.com/AGI-Edgerunners/Plan-and-Solve-Prompting",target:"_blank",rel:"noopener noreferrer"},w=c('<hr><h2 id="_1-背景介绍" tabindex="-1"><a class="header-anchor" href="#_1-背景介绍" aria-hidden="true">#</a> 1 背景介绍</h2><p>近来在各种自然语言处理任务中，大型语言模型（LLMs）展现出了优越的性能。为了解决多步推理任务，少样本链式思维（CoT）提示包括一些手工设计的逐步推理演示，使 LLMs 能够明确生成推理步骤并提高推理准确性。为了消除少样本链式思维（CoT）中的手工工作，零样本 CoT 将目标问题与 “Let’s think step by step” 一起作为输入提示连接到 <code>LLMs</code> 上。尽管零样本 CoT 取得了成功，但仍然存在三个问题：<strong>计算错误</strong>、<strong>缺失步骤错误</strong>和<strong>语义误解错误</strong>。</p><h2 id="_2-思路" tabindex="-1"><a class="header-anchor" href="#_2-思路" aria-hidden="true">#</a> 2 思路</h2><p>为了解决缺失步骤错误，我们提出了 <code>PS</code>（Plan-and-Solve）提示，即制定一个计划将整个任务分解为较小的子任务并按照计划执行子任务，使 <code>LLMs</code> 能够明确制定解决问题的计划，并在预测输入问题的最终答案之前生成中间推理过程。</p><figure><img src="'+p+'" alt="图2.1 推理示例" tabindex="0" loading="lazy"><figcaption>图2.1 推理示例</figcaption></figure><p>通过更详细的说明扩展了 <code>PS</code> 提示基于计划的触发句，并得到了 <code>PS+</code> 提示。具体而言，我们在触发句中添加了 <code>pay attention to calculation</code>，要求 <code>LLMs</code> 尽可能准确地进行计算。</p><p>为了减少由于缺失必要推理步骤而导致的错误，我们在 <code>PS+</code> 提示中增加了<code>extract relevant variables and their corresponding numerals</code>，指示 <code>LLMs</code> 不要忽略输入问题陈述中的相关信息。此外，我们在提示中添加了<code>calculate intermediate results</code>，以增强 <code>LLM</code> 生成推理步骤的能力。</p><figure><img src="'+h+'" alt="图2.2 推理示例" tabindex="0" loading="lazy"><figcaption>图2.2 推理示例</figcaption></figure><p>具体的 <code>PS</code> 和 <code>PS+</code> 提示如下所示：</p><table align="center"><tr><th>Prompt_ID</th><th>Type</th><th>Trigger Sentence</th></tr><tr align="center"><td>101</td><td>CoT</td><td align="left">Let&#39;s think step by step.</td></tr><tr align="center"><td>201</td><td>PS</td><td align="left">Let&#39;s first understand the problem and devise a plan to solve the problem. Then, let&#39;s carry out the plan to solve the problem step by step.</td></tr><tr align="center"><td>301</td><td>PS+</td><td align="left">Let&#39;s first understand the problem, extract relevant variables and their corresponding numerals, and devise a plan. Then, let&#39;s carry out the plan, calculate intermediate variables (pay attention to correct numeral calculation and commonsense), solve the problem step by step, and show the answer.</td></tr><tr align="center"><td>302</td><td>PS+</td><td align="left">Let&#39;s first understand the problem, extract relevant variables and their corresponding numerals, and devise a complete plan. Then, let&#39;s carry out the plan, calculate intermediate variables (pay attention to correct numerical calculation and commonsense), solve the problem step by step, and show the answer.</td></tr><tr align="center"><td>303</td><td>PS+</td><td align="left">Let&#39;s devise a plan and solve the problem step by step.</td></tr><tr align="center"><td>304</td><td>PS+</td><td align="left">Let&#39;s first understand the problem and devise a complete plan. Then, let&#39;s carry out the plan and reason problem step by step. Every step answer the subquestion, &quot;does the person flip and what is the coin&#39;s current state?&quot;. According to the coin&#39;s last state, give the final answer (pay attention to every flip and the coin’s turning state).</td></tr><tr align="center"><td>305</td><td>PS+</td><td align="left">Let&#39;s first understand the problem, extract relevant variables and their corresponding numerals, and make a complete plan. Then, let&#39;s carry out the plan, calculate intermediate variables (pay attention to correct numerical calculation and commonsense), solve the problem step by step, and show the answer.</td></tr><tr align="center"><td>306</td><td>PS+</td><td align="left">Let&#39;s first prepare relevant information and make a plan. Then, let&#39;s answer the question step by step (pay attention to commonsense and logical coherence).</td></tr><tr align="center"><td>307</td><td>PS+</td><td align="left">Let&#39;s first understand the problem, extract relevant variables and their corresponding numerals, and make and devise a complete plan. Then, let&#39;s carry out the plan, calculate intermediate variables (pay attention to correct numerical calculation and commonsense), solve the problem step by step, and show the answer.</td></tr></table><h2 id="_3-实验结果" tabindex="-1"><a class="header-anchor" href="#_3-实验结果" aria-hidden="true">#</a> 3 实验结果</h2><p>在三个推理任务的十个数据集上评估了提出的提示策略。通过对 <code>GPT-3</code> 的实验结果表明，提出的零样本提示在所有数据集上始终明显优于零样本 <code>CoT</code>，并且在数学推理问题上与 <code>8-shot CoT</code> 提示性能相当。</p><p>6 个算术推理数据集的实验结果如下所示，6 个算术推理数据集分别是：（1）MultiArith；（2）GSM8K；（3）AddSub；（4）AQuA；（5）SingleEq；（6）SVAMP。</p><figure><img src="'+g+'" alt="图3.1 数学推理" tabindex="0" loading="lazy"><figcaption>图3.1 数学推理</figcaption></figure><p>2 个常识推理数据集的实验结果如下所示，2 个常识推理数据集分别是：（1）CSQA；（2）StrategyQA。</p><figure><img src="'+m+'" alt="图3.2 常识推理" tabindex="0" loading="lazy"><figcaption>图3.2 常识推理</figcaption></figure><p>2 个符号推理数据集的实验结果如下所示，2 个常识推理数据集分别是：（1）Last Letter；（2）Coin Flip。</p><figure><img src="'+u+'" alt="图3.3 符号推理" tabindex="0" loading="lazy"><figcaption>图3.3 符号推理</figcaption></figure>',19);function C(k,A){const a=o("ExternalLinkIcon"),r=o("PDF");return d(),i("div",null,[_,e("p",null,[e("a",b,[t("该文"),n(a)]),t("介绍了 "),v,t(" 框架，通过将求解推理问题划分为 "),S,t(" 和 "),P,t(" 两个阶段，解决 "),y,t(" 中存在的计算错误、缺失步骤错误和语义误解错误等问题。")]),l(" more "),n(r,{url:"https://arxiv.org/pdf/2305.04091.pdf"}),e("div",L,[x,e("p",null,[t("项目地址："),e("a",T,[t("https://github.com/AGI-Edgerunners/Plan-and-Solve-Prompting"),n(a)])])]),w])}const E=s(f,[["render",C],["__file","PS.html.vue"]]);export{E as default};
